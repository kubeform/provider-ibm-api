/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by informer-gen. DO NOT EDIT.

package externalversions

import (
	reflect "reflect"
	sync "sync"
	time "time"

	versioned "kubeform.dev/provider-ibm-api/client/clientset/versioned"
	apigateway "kubeform.dev/provider-ibm-api/client/informers/externalversions/apigateway"
	app "kubeform.dev/provider-ibm-api/client/informers/externalversions/app"
	cdn "kubeform.dev/provider-ibm-api/client/informers/externalversions/cdn"
	certificate "kubeform.dev/provider-ibm-api/client/informers/externalversions/certificate"
	cis "kubeform.dev/provider-ibm-api/client/informers/externalversions/cis"
	cm "kubeform.dev/provider-ibm-api/client/informers/externalversions/cm"
	compute "kubeform.dev/provider-ibm-api/client/informers/externalversions/compute"
	container "kubeform.dev/provider-ibm-api/client/informers/externalversions/container"
	cos "kubeform.dev/provider-ibm-api/client/informers/externalversions/cos"
	cr "kubeform.dev/provider-ibm-api/client/informers/externalversions/cr"
	database "kubeform.dev/provider-ibm-api/client/informers/externalversions/database"
	dl "kubeform.dev/provider-ibm-api/client/informers/externalversions/dl"
	dns "kubeform.dev/provider-ibm-api/client/informers/externalversions/dns"
	enterprise "kubeform.dev/provider-ibm-api/client/informers/externalversions/enterprise"
	event "kubeform.dev/provider-ibm-api/client/informers/externalversions/event"
	firewall "kubeform.dev/provider-ibm-api/client/informers/externalversions/firewall"
	function "kubeform.dev/provider-ibm-api/client/informers/externalversions/function"
	hardware "kubeform.dev/provider-ibm-api/client/informers/externalversions/hardware"
	hpcs "kubeform.dev/provider-ibm-api/client/informers/externalversions/hpcs"
	iam "kubeform.dev/provider-ibm-api/client/informers/externalversions/iam"
	internalinterfaces "kubeform.dev/provider-ibm-api/client/informers/externalversions/internalinterfaces"
	ipsec "kubeform.dev/provider-ibm-api/client/informers/externalversions/ipsec"
	is "kubeform.dev/provider-ibm-api/client/informers/externalversions/is"
	kms "kubeform.dev/provider-ibm-api/client/informers/externalversions/kms"
	kp "kubeform.dev/provider-ibm-api/client/informers/externalversions/kp"
	lb "kubeform.dev/provider-ibm-api/client/informers/externalversions/lb"
	lbaas "kubeform.dev/provider-ibm-api/client/informers/externalversions/lbaas"
	multi "kubeform.dev/provider-ibm-api/client/informers/externalversions/multi"
	network "kubeform.dev/provider-ibm-api/client/informers/externalversions/network"
	ob "kubeform.dev/provider-ibm-api/client/informers/externalversions/ob"
	object "kubeform.dev/provider-ibm-api/client/informers/externalversions/object"
	org "kubeform.dev/provider-ibm-api/client/informers/externalversions/org"
	pi "kubeform.dev/provider-ibm-api/client/informers/externalversions/pi"
	pn "kubeform.dev/provider-ibm-api/client/informers/externalversions/pn"
	resource "kubeform.dev/provider-ibm-api/client/informers/externalversions/resource"
	satellite "kubeform.dev/provider-ibm-api/client/informers/externalversions/satellite"
	schematics "kubeform.dev/provider-ibm-api/client/informers/externalversions/schematics"
	security "kubeform.dev/provider-ibm-api/client/informers/externalversions/security"
	service "kubeform.dev/provider-ibm-api/client/informers/externalversions/service"
	space "kubeform.dev/provider-ibm-api/client/informers/externalversions/space"
	ssl "kubeform.dev/provider-ibm-api/client/informers/externalversions/ssl"
	storage "kubeform.dev/provider-ibm-api/client/informers/externalversions/storage"
	subnet "kubeform.dev/provider-ibm-api/client/informers/externalversions/subnet"
	tg "kubeform.dev/provider-ibm-api/client/informers/externalversions/tg"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	cache "k8s.io/client-go/tools/cache"
)

// SharedInformerOption defines the functional option type for SharedInformerFactory.
type SharedInformerOption func(*sharedInformerFactory) *sharedInformerFactory

type sharedInformerFactory struct {
	client           versioned.Interface
	namespace        string
	tweakListOptions internalinterfaces.TweakListOptionsFunc
	lock             sync.Mutex
	defaultResync    time.Duration
	customResync     map[reflect.Type]time.Duration

	informers map[reflect.Type]cache.SharedIndexInformer
	// startedInformers is used for tracking which informers have been started.
	// This allows Start() to be called multiple times safely.
	startedInformers map[reflect.Type]bool
}

// WithCustomResyncConfig sets a custom resync period for the specified informer types.
func WithCustomResyncConfig(resyncConfig map[v1.Object]time.Duration) SharedInformerOption {
	return func(factory *sharedInformerFactory) *sharedInformerFactory {
		for k, v := range resyncConfig {
			factory.customResync[reflect.TypeOf(k)] = v
		}
		return factory
	}
}

// WithTweakListOptions sets a custom filter on all listers of the configured SharedInformerFactory.
func WithTweakListOptions(tweakListOptions internalinterfaces.TweakListOptionsFunc) SharedInformerOption {
	return func(factory *sharedInformerFactory) *sharedInformerFactory {
		factory.tweakListOptions = tweakListOptions
		return factory
	}
}

// WithNamespace limits the SharedInformerFactory to the specified namespace.
func WithNamespace(namespace string) SharedInformerOption {
	return func(factory *sharedInformerFactory) *sharedInformerFactory {
		factory.namespace = namespace
		return factory
	}
}

// NewSharedInformerFactory constructs a new instance of sharedInformerFactory for all namespaces.
func NewSharedInformerFactory(client versioned.Interface, defaultResync time.Duration) SharedInformerFactory {
	return NewSharedInformerFactoryWithOptions(client, defaultResync)
}

// NewFilteredSharedInformerFactory constructs a new instance of sharedInformerFactory.
// Listers obtained via this SharedInformerFactory will be subject to the same filters
// as specified here.
// Deprecated: Please use NewSharedInformerFactoryWithOptions instead
func NewFilteredSharedInformerFactory(client versioned.Interface, defaultResync time.Duration, namespace string, tweakListOptions internalinterfaces.TweakListOptionsFunc) SharedInformerFactory {
	return NewSharedInformerFactoryWithOptions(client, defaultResync, WithNamespace(namespace), WithTweakListOptions(tweakListOptions))
}

// NewSharedInformerFactoryWithOptions constructs a new instance of a SharedInformerFactory with additional options.
func NewSharedInformerFactoryWithOptions(client versioned.Interface, defaultResync time.Duration, options ...SharedInformerOption) SharedInformerFactory {
	factory := &sharedInformerFactory{
		client:           client,
		namespace:        v1.NamespaceAll,
		defaultResync:    defaultResync,
		informers:        make(map[reflect.Type]cache.SharedIndexInformer),
		startedInformers: make(map[reflect.Type]bool),
		customResync:     make(map[reflect.Type]time.Duration),
	}

	// Apply all options
	for _, opt := range options {
		factory = opt(factory)
	}

	return factory
}

// Start initializes all requested informers.
func (f *sharedInformerFactory) Start(stopCh <-chan struct{}) {
	f.lock.Lock()
	defer f.lock.Unlock()

	for informerType, informer := range f.informers {
		if !f.startedInformers[informerType] {
			go informer.Run(stopCh)
			f.startedInformers[informerType] = true
		}
	}
}

// WaitForCacheSync waits for all started informers' cache were synced.
func (f *sharedInformerFactory) WaitForCacheSync(stopCh <-chan struct{}) map[reflect.Type]bool {
	informers := func() map[reflect.Type]cache.SharedIndexInformer {
		f.lock.Lock()
		defer f.lock.Unlock()

		informers := map[reflect.Type]cache.SharedIndexInformer{}
		for informerType, informer := range f.informers {
			if f.startedInformers[informerType] {
				informers[informerType] = informer
			}
		}
		return informers
	}()

	res := map[reflect.Type]bool{}
	for informType, informer := range informers {
		res[informType] = cache.WaitForCacheSync(stopCh, informer.HasSynced)
	}
	return res
}

// InternalInformerFor returns the SharedIndexInformer for obj using an internal
// client.
func (f *sharedInformerFactory) InformerFor(obj runtime.Object, newFunc internalinterfaces.NewInformerFunc) cache.SharedIndexInformer {
	f.lock.Lock()
	defer f.lock.Unlock()

	informerType := reflect.TypeOf(obj)
	informer, exists := f.informers[informerType]
	if exists {
		return informer
	}

	resyncPeriod, exists := f.customResync[informerType]
	if !exists {
		resyncPeriod = f.defaultResync
	}

	informer = newFunc(f.client, resyncPeriod)
	f.informers[informerType] = informer

	return informer
}

// SharedInformerFactory provides shared informers for resources in all known
// API group versions.
type SharedInformerFactory interface {
	internalinterfaces.SharedInformerFactory
	ForResource(resource schema.GroupVersionResource) (GenericInformer, error)
	WaitForCacheSync(stopCh <-chan struct{}) map[reflect.Type]bool

	Apigateway() apigateway.Interface
	App() app.Interface
	Cdn() cdn.Interface
	Certificate() certificate.Interface
	Cis() cis.Interface
	Cm() cm.Interface
	Compute() compute.Interface
	Container() container.Interface
	Cos() cos.Interface
	Cr() cr.Interface
	Database() database.Interface
	Dl() dl.Interface
	Dns() dns.Interface
	Enterprise() enterprise.Interface
	Event() event.Interface
	Firewall() firewall.Interface
	Function() function.Interface
	Hardware() hardware.Interface
	Hpcs() hpcs.Interface
	Iam() iam.Interface
	Ipsec() ipsec.Interface
	Is() is.Interface
	Kms() kms.Interface
	Kp() kp.Interface
	Lb() lb.Interface
	Lbaas() lbaas.Interface
	Multi() multi.Interface
	Network() network.Interface
	Ob() ob.Interface
	Object() object.Interface
	Org() org.Interface
	Pi() pi.Interface
	Pn() pn.Interface
	Resource() resource.Interface
	Satellite() satellite.Interface
	Schematics() schematics.Interface
	Security() security.Interface
	Service() service.Interface
	Space() space.Interface
	Ssl() ssl.Interface
	Storage() storage.Interface
	Subnet() subnet.Interface
	Tg() tg.Interface
}

func (f *sharedInformerFactory) Apigateway() apigateway.Interface {
	return apigateway.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) App() app.Interface {
	return app.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Cdn() cdn.Interface {
	return cdn.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Certificate() certificate.Interface {
	return certificate.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Cis() cis.Interface {
	return cis.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Cm() cm.Interface {
	return cm.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Compute() compute.Interface {
	return compute.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Container() container.Interface {
	return container.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Cos() cos.Interface {
	return cos.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Cr() cr.Interface {
	return cr.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Database() database.Interface {
	return database.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Dl() dl.Interface {
	return dl.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Dns() dns.Interface {
	return dns.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Enterprise() enterprise.Interface {
	return enterprise.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Event() event.Interface {
	return event.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Firewall() firewall.Interface {
	return firewall.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Function() function.Interface {
	return function.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Hardware() hardware.Interface {
	return hardware.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Hpcs() hpcs.Interface {
	return hpcs.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Iam() iam.Interface {
	return iam.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Ipsec() ipsec.Interface {
	return ipsec.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Is() is.Interface {
	return is.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Kms() kms.Interface {
	return kms.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Kp() kp.Interface {
	return kp.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Lb() lb.Interface {
	return lb.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Lbaas() lbaas.Interface {
	return lbaas.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Multi() multi.Interface {
	return multi.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Network() network.Interface {
	return network.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Ob() ob.Interface {
	return ob.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Object() object.Interface {
	return object.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Org() org.Interface {
	return org.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Pi() pi.Interface {
	return pi.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Pn() pn.Interface {
	return pn.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Resource() resource.Interface {
	return resource.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Satellite() satellite.Interface {
	return satellite.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Schematics() schematics.Interface {
	return schematics.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Security() security.Interface {
	return security.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Service() service.Interface {
	return service.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Space() space.Interface {
	return space.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Ssl() ssl.Interface {
	return ssl.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Storage() storage.Interface {
	return storage.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Subnet() subnet.Interface {
	return subnet.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Tg() tg.Interface {
	return tg.New(f, f.namespace, f.tweakListOptions)
}
