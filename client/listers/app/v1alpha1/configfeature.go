/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-ibm-api/apis/app/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ConfigFeatureLister helps list ConfigFeatures.
// All objects returned here must be treated as read-only.
type ConfigFeatureLister interface {
	// List lists all ConfigFeatures in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ConfigFeature, err error)
	// ConfigFeatures returns an object that can list and get ConfigFeatures.
	ConfigFeatures(namespace string) ConfigFeatureNamespaceLister
	ConfigFeatureListerExpansion
}

// configFeatureLister implements the ConfigFeatureLister interface.
type configFeatureLister struct {
	indexer cache.Indexer
}

// NewConfigFeatureLister returns a new ConfigFeatureLister.
func NewConfigFeatureLister(indexer cache.Indexer) ConfigFeatureLister {
	return &configFeatureLister{indexer: indexer}
}

// List lists all ConfigFeatures in the indexer.
func (s *configFeatureLister) List(selector labels.Selector) (ret []*v1alpha1.ConfigFeature, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ConfigFeature))
	})
	return ret, err
}

// ConfigFeatures returns an object that can list and get ConfigFeatures.
func (s *configFeatureLister) ConfigFeatures(namespace string) ConfigFeatureNamespaceLister {
	return configFeatureNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ConfigFeatureNamespaceLister helps list and get ConfigFeatures.
// All objects returned here must be treated as read-only.
type ConfigFeatureNamespaceLister interface {
	// List lists all ConfigFeatures in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ConfigFeature, err error)
	// Get retrieves the ConfigFeature from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ConfigFeature, error)
	ConfigFeatureNamespaceListerExpansion
}

// configFeatureNamespaceLister implements the ConfigFeatureNamespaceLister
// interface.
type configFeatureNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ConfigFeatures in the indexer for a given namespace.
func (s configFeatureNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ConfigFeature, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ConfigFeature))
	})
	return ret, err
}

// Get retrieves the ConfigFeature from the indexer for a given namespace and name.
func (s configFeatureNamespaceLister) Get(name string) (*v1alpha1.ConfigFeature, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("configfeature"), name)
	}
	return obj.(*v1alpha1.ConfigFeature), nil
}
