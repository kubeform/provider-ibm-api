/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-ibm-api/apis/app/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DomainSharedLister helps list DomainShareds.
// All objects returned here must be treated as read-only.
type DomainSharedLister interface {
	// List lists all DomainShareds in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DomainShared, err error)
	// DomainShareds returns an object that can list and get DomainShareds.
	DomainShareds(namespace string) DomainSharedNamespaceLister
	DomainSharedListerExpansion
}

// domainSharedLister implements the DomainSharedLister interface.
type domainSharedLister struct {
	indexer cache.Indexer
}

// NewDomainSharedLister returns a new DomainSharedLister.
func NewDomainSharedLister(indexer cache.Indexer) DomainSharedLister {
	return &domainSharedLister{indexer: indexer}
}

// List lists all DomainShareds in the indexer.
func (s *domainSharedLister) List(selector labels.Selector) (ret []*v1alpha1.DomainShared, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DomainShared))
	})
	return ret, err
}

// DomainShareds returns an object that can list and get DomainShareds.
func (s *domainSharedLister) DomainShareds(namespace string) DomainSharedNamespaceLister {
	return domainSharedNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DomainSharedNamespaceLister helps list and get DomainShareds.
// All objects returned here must be treated as read-only.
type DomainSharedNamespaceLister interface {
	// List lists all DomainShareds in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DomainShared, err error)
	// Get retrieves the DomainShared from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.DomainShared, error)
	DomainSharedNamespaceListerExpansion
}

// domainSharedNamespaceLister implements the DomainSharedNamespaceLister
// interface.
type domainSharedNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DomainShareds in the indexer for a given namespace.
func (s domainSharedNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DomainShared, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DomainShared))
	})
	return ret, err
}

// Get retrieves the DomainShared from the indexer for a given namespace and name.
func (s domainSharedNamespaceLister) Get(name string) (*v1alpha1.DomainShared, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("domainshared"), name)
	}
	return obj.(*v1alpha1.DomainShared), nil
}
