/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-ibm-api/apis/app/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DomainPrivateLister helps list DomainPrivates.
// All objects returned here must be treated as read-only.
type DomainPrivateLister interface {
	// List lists all DomainPrivates in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DomainPrivate, err error)
	// DomainPrivates returns an object that can list and get DomainPrivates.
	DomainPrivates(namespace string) DomainPrivateNamespaceLister
	DomainPrivateListerExpansion
}

// domainPrivateLister implements the DomainPrivateLister interface.
type domainPrivateLister struct {
	indexer cache.Indexer
}

// NewDomainPrivateLister returns a new DomainPrivateLister.
func NewDomainPrivateLister(indexer cache.Indexer) DomainPrivateLister {
	return &domainPrivateLister{indexer: indexer}
}

// List lists all DomainPrivates in the indexer.
func (s *domainPrivateLister) List(selector labels.Selector) (ret []*v1alpha1.DomainPrivate, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DomainPrivate))
	})
	return ret, err
}

// DomainPrivates returns an object that can list and get DomainPrivates.
func (s *domainPrivateLister) DomainPrivates(namespace string) DomainPrivateNamespaceLister {
	return domainPrivateNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DomainPrivateNamespaceLister helps list and get DomainPrivates.
// All objects returned here must be treated as read-only.
type DomainPrivateNamespaceLister interface {
	// List lists all DomainPrivates in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DomainPrivate, err error)
	// Get retrieves the DomainPrivate from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.DomainPrivate, error)
	DomainPrivateNamespaceListerExpansion
}

// domainPrivateNamespaceLister implements the DomainPrivateNamespaceLister
// interface.
type domainPrivateNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DomainPrivates in the indexer for a given namespace.
func (s domainPrivateNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DomainPrivate, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DomainPrivate))
	})
	return ret, err
}

// Get retrieves the DomainPrivate from the indexer for a given namespace and name.
func (s domainPrivateNamespaceLister) Get(name string) (*v1alpha1.DomainPrivate, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("domainprivate"), name)
	}
	return obj.(*v1alpha1.DomainPrivate), nil
}
