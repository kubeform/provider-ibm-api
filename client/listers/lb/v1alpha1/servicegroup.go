/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-ibm-api/apis/lb/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ServiceGroupLister helps list ServiceGroups.
// All objects returned here must be treated as read-only.
type ServiceGroupLister interface {
	// List lists all ServiceGroups in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ServiceGroup, err error)
	// ServiceGroups returns an object that can list and get ServiceGroups.
	ServiceGroups(namespace string) ServiceGroupNamespaceLister
	ServiceGroupListerExpansion
}

// serviceGroupLister implements the ServiceGroupLister interface.
type serviceGroupLister struct {
	indexer cache.Indexer
}

// NewServiceGroupLister returns a new ServiceGroupLister.
func NewServiceGroupLister(indexer cache.Indexer) ServiceGroupLister {
	return &serviceGroupLister{indexer: indexer}
}

// List lists all ServiceGroups in the indexer.
func (s *serviceGroupLister) List(selector labels.Selector) (ret []*v1alpha1.ServiceGroup, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServiceGroup))
	})
	return ret, err
}

// ServiceGroups returns an object that can list and get ServiceGroups.
func (s *serviceGroupLister) ServiceGroups(namespace string) ServiceGroupNamespaceLister {
	return serviceGroupNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ServiceGroupNamespaceLister helps list and get ServiceGroups.
// All objects returned here must be treated as read-only.
type ServiceGroupNamespaceLister interface {
	// List lists all ServiceGroups in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ServiceGroup, err error)
	// Get retrieves the ServiceGroup from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ServiceGroup, error)
	ServiceGroupNamespaceListerExpansion
}

// serviceGroupNamespaceLister implements the ServiceGroupNamespaceLister
// interface.
type serviceGroupNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ServiceGroups in the indexer for a given namespace.
func (s serviceGroupNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ServiceGroup, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServiceGroup))
	})
	return ret, err
}

// Get retrieves the ServiceGroup from the indexer for a given namespace and name.
func (s serviceGroupNamespaceLister) Get(name string) (*v1alpha1.ServiceGroup, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("servicegroup"), name)
	}
	return obj.(*v1alpha1.ServiceGroup), nil
}
