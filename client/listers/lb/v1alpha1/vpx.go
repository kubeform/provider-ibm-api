/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-ibm-api/apis/lb/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VpxLister helps list Vpxes.
// All objects returned here must be treated as read-only.
type VpxLister interface {
	// List lists all Vpxes in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Vpx, err error)
	// Vpxes returns an object that can list and get Vpxes.
	Vpxes(namespace string) VpxNamespaceLister
	VpxListerExpansion
}

// vpxLister implements the VpxLister interface.
type vpxLister struct {
	indexer cache.Indexer
}

// NewVpxLister returns a new VpxLister.
func NewVpxLister(indexer cache.Indexer) VpxLister {
	return &vpxLister{indexer: indexer}
}

// List lists all Vpxes in the indexer.
func (s *vpxLister) List(selector labels.Selector) (ret []*v1alpha1.Vpx, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Vpx))
	})
	return ret, err
}

// Vpxes returns an object that can list and get Vpxes.
func (s *vpxLister) Vpxes(namespace string) VpxNamespaceLister {
	return vpxNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VpxNamespaceLister helps list and get Vpxes.
// All objects returned here must be treated as read-only.
type VpxNamespaceLister interface {
	// List lists all Vpxes in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Vpx, err error)
	// Get retrieves the Vpx from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Vpx, error)
	VpxNamespaceListerExpansion
}

// vpxNamespaceLister implements the VpxNamespaceLister
// interface.
type vpxNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Vpxes in the indexer for a given namespace.
func (s vpxNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Vpx, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Vpx))
	})
	return ret, err
}

// Get retrieves the Vpx from the indexer for a given namespace and name.
func (s vpxNamespaceLister) Get(name string) (*v1alpha1.Vpx, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("vpx"), name)
	}
	return obj.(*v1alpha1.Vpx), nil
}
