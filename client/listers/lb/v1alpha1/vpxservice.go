/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-ibm-api/apis/lb/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VpxServiceLister helps list VpxServices.
// All objects returned here must be treated as read-only.
type VpxServiceLister interface {
	// List lists all VpxServices in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VpxService, err error)
	// VpxServices returns an object that can list and get VpxServices.
	VpxServices(namespace string) VpxServiceNamespaceLister
	VpxServiceListerExpansion
}

// vpxServiceLister implements the VpxServiceLister interface.
type vpxServiceLister struct {
	indexer cache.Indexer
}

// NewVpxServiceLister returns a new VpxServiceLister.
func NewVpxServiceLister(indexer cache.Indexer) VpxServiceLister {
	return &vpxServiceLister{indexer: indexer}
}

// List lists all VpxServices in the indexer.
func (s *vpxServiceLister) List(selector labels.Selector) (ret []*v1alpha1.VpxService, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VpxService))
	})
	return ret, err
}

// VpxServices returns an object that can list and get VpxServices.
func (s *vpxServiceLister) VpxServices(namespace string) VpxServiceNamespaceLister {
	return vpxServiceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VpxServiceNamespaceLister helps list and get VpxServices.
// All objects returned here must be treated as read-only.
type VpxServiceNamespaceLister interface {
	// List lists all VpxServices in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VpxService, err error)
	// Get retrieves the VpxService from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.VpxService, error)
	VpxServiceNamespaceListerExpansion
}

// vpxServiceNamespaceLister implements the VpxServiceNamespaceLister
// interface.
type vpxServiceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all VpxServices in the indexer for a given namespace.
func (s vpxServiceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.VpxService, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VpxService))
	})
	return ret, err
}

// Get retrieves the VpxService from the indexer for a given namespace and name.
func (s vpxServiceNamespaceLister) Get(name string) (*v1alpha1.VpxService, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("vpxservice"), name)
	}
	return obj.(*v1alpha1.VpxService), nil
}
