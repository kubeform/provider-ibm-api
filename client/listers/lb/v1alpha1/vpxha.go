/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-ibm-api/apis/lb/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VpxHaLister helps list VpxHas.
// All objects returned here must be treated as read-only.
type VpxHaLister interface {
	// List lists all VpxHas in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VpxHa, err error)
	// VpxHas returns an object that can list and get VpxHas.
	VpxHas(namespace string) VpxHaNamespaceLister
	VpxHaListerExpansion
}

// vpxHaLister implements the VpxHaLister interface.
type vpxHaLister struct {
	indexer cache.Indexer
}

// NewVpxHaLister returns a new VpxHaLister.
func NewVpxHaLister(indexer cache.Indexer) VpxHaLister {
	return &vpxHaLister{indexer: indexer}
}

// List lists all VpxHas in the indexer.
func (s *vpxHaLister) List(selector labels.Selector) (ret []*v1alpha1.VpxHa, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VpxHa))
	})
	return ret, err
}

// VpxHas returns an object that can list and get VpxHas.
func (s *vpxHaLister) VpxHas(namespace string) VpxHaNamespaceLister {
	return vpxHaNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VpxHaNamespaceLister helps list and get VpxHas.
// All objects returned here must be treated as read-only.
type VpxHaNamespaceLister interface {
	// List lists all VpxHas in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VpxHa, err error)
	// Get retrieves the VpxHa from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.VpxHa, error)
	VpxHaNamespaceListerExpansion
}

// vpxHaNamespaceLister implements the VpxHaNamespaceLister
// interface.
type vpxHaNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all VpxHas in the indexer for a given namespace.
func (s vpxHaNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.VpxHa, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VpxHa))
	})
	return ret, err
}

// Get retrieves the VpxHa from the indexer for a given namespace and name.
func (s vpxHaNamespaceLister) Get(name string) (*v1alpha1.VpxHa, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("vpxha"), name)
	}
	return obj.(*v1alpha1.VpxHa), nil
}
