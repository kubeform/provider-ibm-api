/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-ibm-api/apis/lb/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// LbLister helps list Lbs.
// All objects returned here must be treated as read-only.
type LbLister interface {
	// List lists all Lbs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Lb, err error)
	// Lbs returns an object that can list and get Lbs.
	Lbs(namespace string) LbNamespaceLister
	LbListerExpansion
}

// lbLister implements the LbLister interface.
type lbLister struct {
	indexer cache.Indexer
}

// NewLbLister returns a new LbLister.
func NewLbLister(indexer cache.Indexer) LbLister {
	return &lbLister{indexer: indexer}
}

// List lists all Lbs in the indexer.
func (s *lbLister) List(selector labels.Selector) (ret []*v1alpha1.Lb, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Lb))
	})
	return ret, err
}

// Lbs returns an object that can list and get Lbs.
func (s *lbLister) Lbs(namespace string) LbNamespaceLister {
	return lbNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// LbNamespaceLister helps list and get Lbs.
// All objects returned here must be treated as read-only.
type LbNamespaceLister interface {
	// List lists all Lbs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Lb, err error)
	// Get retrieves the Lb from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Lb, error)
	LbNamespaceListerExpansion
}

// lbNamespaceLister implements the LbNamespaceLister
// interface.
type lbNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Lbs in the indexer for a given namespace.
func (s lbNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Lb, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Lb))
	})
	return ret, err
}

// Get retrieves the Lb from the indexer for a given namespace and name.
func (s lbNamespaceLister) Get(name string) (*v1alpha1.Lb, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("lb"), name)
	}
	return obj.(*v1alpha1.Lb), nil
}
