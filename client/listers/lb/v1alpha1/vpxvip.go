/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-ibm-api/apis/lb/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VpxVipLister helps list VpxVips.
// All objects returned here must be treated as read-only.
type VpxVipLister interface {
	// List lists all VpxVips in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VpxVip, err error)
	// VpxVips returns an object that can list and get VpxVips.
	VpxVips(namespace string) VpxVipNamespaceLister
	VpxVipListerExpansion
}

// vpxVipLister implements the VpxVipLister interface.
type vpxVipLister struct {
	indexer cache.Indexer
}

// NewVpxVipLister returns a new VpxVipLister.
func NewVpxVipLister(indexer cache.Indexer) VpxVipLister {
	return &vpxVipLister{indexer: indexer}
}

// List lists all VpxVips in the indexer.
func (s *vpxVipLister) List(selector labels.Selector) (ret []*v1alpha1.VpxVip, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VpxVip))
	})
	return ret, err
}

// VpxVips returns an object that can list and get VpxVips.
func (s *vpxVipLister) VpxVips(namespace string) VpxVipNamespaceLister {
	return vpxVipNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VpxVipNamespaceLister helps list and get VpxVips.
// All objects returned here must be treated as read-only.
type VpxVipNamespaceLister interface {
	// List lists all VpxVips in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VpxVip, err error)
	// Get retrieves the VpxVip from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.VpxVip, error)
	VpxVipNamespaceListerExpansion
}

// vpxVipNamespaceLister implements the VpxVipNamespaceLister
// interface.
type vpxVipNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all VpxVips in the indexer for a given namespace.
func (s vpxVipNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.VpxVip, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VpxVip))
	})
	return ret, err
}

// Get retrieves the VpxVip from the indexer for a given namespace and name.
func (s vpxVipNamespaceLister) Get(name string) (*v1alpha1.VpxVip, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("vpxvip"), name)
	}
	return obj.(*v1alpha1.VpxVip), nil
}
