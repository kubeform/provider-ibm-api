/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-ibm-api/apis/ob/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// LoggingLister helps list Loggings.
// All objects returned here must be treated as read-only.
type LoggingLister interface {
	// List lists all Loggings in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Logging, err error)
	// Loggings returns an object that can list and get Loggings.
	Loggings(namespace string) LoggingNamespaceLister
	LoggingListerExpansion
}

// loggingLister implements the LoggingLister interface.
type loggingLister struct {
	indexer cache.Indexer
}

// NewLoggingLister returns a new LoggingLister.
func NewLoggingLister(indexer cache.Indexer) LoggingLister {
	return &loggingLister{indexer: indexer}
}

// List lists all Loggings in the indexer.
func (s *loggingLister) List(selector labels.Selector) (ret []*v1alpha1.Logging, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Logging))
	})
	return ret, err
}

// Loggings returns an object that can list and get Loggings.
func (s *loggingLister) Loggings(namespace string) LoggingNamespaceLister {
	return loggingNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// LoggingNamespaceLister helps list and get Loggings.
// All objects returned here must be treated as read-only.
type LoggingNamespaceLister interface {
	// List lists all Loggings in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Logging, err error)
	// Get retrieves the Logging from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Logging, error)
	LoggingNamespaceListerExpansion
}

// loggingNamespaceLister implements the LoggingNamespaceLister
// interface.
type loggingNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Loggings in the indexer for a given namespace.
func (s loggingNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Logging, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Logging))
	})
	return ret, err
}

// Get retrieves the Logging from the indexer for a given namespace and name.
func (s loggingNamespaceLister) Get(name string) (*v1alpha1.Logging, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("logging"), name)
	}
	return obj.(*v1alpha1.Logging), nil
}
