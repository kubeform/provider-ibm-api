/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-ibm-api/apis/kms/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// KeyAliasLister helps list KeyAliases.
// All objects returned here must be treated as read-only.
type KeyAliasLister interface {
	// List lists all KeyAliases in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.KeyAlias, err error)
	// KeyAliases returns an object that can list and get KeyAliases.
	KeyAliases(namespace string) KeyAliasNamespaceLister
	KeyAliasListerExpansion
}

// keyAliasLister implements the KeyAliasLister interface.
type keyAliasLister struct {
	indexer cache.Indexer
}

// NewKeyAliasLister returns a new KeyAliasLister.
func NewKeyAliasLister(indexer cache.Indexer) KeyAliasLister {
	return &keyAliasLister{indexer: indexer}
}

// List lists all KeyAliases in the indexer.
func (s *keyAliasLister) List(selector labels.Selector) (ret []*v1alpha1.KeyAlias, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.KeyAlias))
	})
	return ret, err
}

// KeyAliases returns an object that can list and get KeyAliases.
func (s *keyAliasLister) KeyAliases(namespace string) KeyAliasNamespaceLister {
	return keyAliasNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// KeyAliasNamespaceLister helps list and get KeyAliases.
// All objects returned here must be treated as read-only.
type KeyAliasNamespaceLister interface {
	// List lists all KeyAliases in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.KeyAlias, err error)
	// Get retrieves the KeyAlias from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.KeyAlias, error)
	KeyAliasNamespaceListerExpansion
}

// keyAliasNamespaceLister implements the KeyAliasNamespaceLister
// interface.
type keyAliasNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all KeyAliases in the indexer for a given namespace.
func (s keyAliasNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.KeyAlias, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.KeyAlias))
	})
	return ret, err
}

// Get retrieves the KeyAlias from the indexer for a given namespace and name.
func (s keyAliasNamespaceLister) Get(name string) (*v1alpha1.KeyAlias, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("keyalias"), name)
	}
	return obj.(*v1alpha1.KeyAlias), nil
}
