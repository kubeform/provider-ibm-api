/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-ibm-api/apis/storage/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// EvaultLister helps list Evaults.
// All objects returned here must be treated as read-only.
type EvaultLister interface {
	// List lists all Evaults in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Evault, err error)
	// Evaults returns an object that can list and get Evaults.
	Evaults(namespace string) EvaultNamespaceLister
	EvaultListerExpansion
}

// evaultLister implements the EvaultLister interface.
type evaultLister struct {
	indexer cache.Indexer
}

// NewEvaultLister returns a new EvaultLister.
func NewEvaultLister(indexer cache.Indexer) EvaultLister {
	return &evaultLister{indexer: indexer}
}

// List lists all Evaults in the indexer.
func (s *evaultLister) List(selector labels.Selector) (ret []*v1alpha1.Evault, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Evault))
	})
	return ret, err
}

// Evaults returns an object that can list and get Evaults.
func (s *evaultLister) Evaults(namespace string) EvaultNamespaceLister {
	return evaultNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// EvaultNamespaceLister helps list and get Evaults.
// All objects returned here must be treated as read-only.
type EvaultNamespaceLister interface {
	// List lists all Evaults in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Evault, err error)
	// Get retrieves the Evault from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Evault, error)
	EvaultNamespaceListerExpansion
}

// evaultNamespaceLister implements the EvaultNamespaceLister
// interface.
type evaultNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Evaults in the indexer for a given namespace.
func (s evaultNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Evault, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Evault))
	})
	return ret, err
}

// Get retrieves the Evault from the indexer for a given namespace and name.
func (s evaultNamespaceLister) Get(name string) (*v1alpha1.Evault, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("evault"), name)
	}
	return obj.(*v1alpha1.Evault), nil
}
