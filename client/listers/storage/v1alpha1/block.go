/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-ibm-api/apis/storage/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// BlockLister helps list Blocks.
// All objects returned here must be treated as read-only.
type BlockLister interface {
	// List lists all Blocks in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Block, err error)
	// Blocks returns an object that can list and get Blocks.
	Blocks(namespace string) BlockNamespaceLister
	BlockListerExpansion
}

// blockLister implements the BlockLister interface.
type blockLister struct {
	indexer cache.Indexer
}

// NewBlockLister returns a new BlockLister.
func NewBlockLister(indexer cache.Indexer) BlockLister {
	return &blockLister{indexer: indexer}
}

// List lists all Blocks in the indexer.
func (s *blockLister) List(selector labels.Selector) (ret []*v1alpha1.Block, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Block))
	})
	return ret, err
}

// Blocks returns an object that can list and get Blocks.
func (s *blockLister) Blocks(namespace string) BlockNamespaceLister {
	return blockNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// BlockNamespaceLister helps list and get Blocks.
// All objects returned here must be treated as read-only.
type BlockNamespaceLister interface {
	// List lists all Blocks in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Block, err error)
	// Get retrieves the Block from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Block, error)
	BlockNamespaceListerExpansion
}

// blockNamespaceLister implements the BlockNamespaceLister
// interface.
type blockNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Blocks in the indexer for a given namespace.
func (s blockNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Block, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Block))
	})
	return ret, err
}

// Get retrieves the Block from the indexer for a given namespace and name.
func (s blockNamespaceLister) Get(name string) (*v1alpha1.Block, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("block"), name)
	}
	return obj.(*v1alpha1.Block), nil
}
