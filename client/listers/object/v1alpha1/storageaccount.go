/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-ibm-api/apis/object/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// StorageAccountLister helps list StorageAccounts.
// All objects returned here must be treated as read-only.
type StorageAccountLister interface {
	// List lists all StorageAccounts in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.StorageAccount, err error)
	// StorageAccounts returns an object that can list and get StorageAccounts.
	StorageAccounts(namespace string) StorageAccountNamespaceLister
	StorageAccountListerExpansion
}

// storageAccountLister implements the StorageAccountLister interface.
type storageAccountLister struct {
	indexer cache.Indexer
}

// NewStorageAccountLister returns a new StorageAccountLister.
func NewStorageAccountLister(indexer cache.Indexer) StorageAccountLister {
	return &storageAccountLister{indexer: indexer}
}

// List lists all StorageAccounts in the indexer.
func (s *storageAccountLister) List(selector labels.Selector) (ret []*v1alpha1.StorageAccount, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.StorageAccount))
	})
	return ret, err
}

// StorageAccounts returns an object that can list and get StorageAccounts.
func (s *storageAccountLister) StorageAccounts(namespace string) StorageAccountNamespaceLister {
	return storageAccountNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// StorageAccountNamespaceLister helps list and get StorageAccounts.
// All objects returned here must be treated as read-only.
type StorageAccountNamespaceLister interface {
	// List lists all StorageAccounts in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.StorageAccount, err error)
	// Get retrieves the StorageAccount from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.StorageAccount, error)
	StorageAccountNamespaceListerExpansion
}

// storageAccountNamespaceLister implements the StorageAccountNamespaceLister
// interface.
type storageAccountNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all StorageAccounts in the indexer for a given namespace.
func (s storageAccountNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.StorageAccount, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.StorageAccount))
	})
	return ret, err
}

// Get retrieves the StorageAccount from the indexer for a given namespace and name.
func (s storageAccountNamespaceLister) Get(name string) (*v1alpha1.StorageAccount, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("storageaccount"), name)
	}
	return obj.(*v1alpha1.StorageAccount), nil
}
