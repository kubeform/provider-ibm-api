/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-ibm-api/apis/hardware/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// FirewallSharedLister helps list FirewallShareds.
// All objects returned here must be treated as read-only.
type FirewallSharedLister interface {
	// List lists all FirewallShareds in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.FirewallShared, err error)
	// FirewallShareds returns an object that can list and get FirewallShareds.
	FirewallShareds(namespace string) FirewallSharedNamespaceLister
	FirewallSharedListerExpansion
}

// firewallSharedLister implements the FirewallSharedLister interface.
type firewallSharedLister struct {
	indexer cache.Indexer
}

// NewFirewallSharedLister returns a new FirewallSharedLister.
func NewFirewallSharedLister(indexer cache.Indexer) FirewallSharedLister {
	return &firewallSharedLister{indexer: indexer}
}

// List lists all FirewallShareds in the indexer.
func (s *firewallSharedLister) List(selector labels.Selector) (ret []*v1alpha1.FirewallShared, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FirewallShared))
	})
	return ret, err
}

// FirewallShareds returns an object that can list and get FirewallShareds.
func (s *firewallSharedLister) FirewallShareds(namespace string) FirewallSharedNamespaceLister {
	return firewallSharedNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// FirewallSharedNamespaceLister helps list and get FirewallShareds.
// All objects returned here must be treated as read-only.
type FirewallSharedNamespaceLister interface {
	// List lists all FirewallShareds in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.FirewallShared, err error)
	// Get retrieves the FirewallShared from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.FirewallShared, error)
	FirewallSharedNamespaceListerExpansion
}

// firewallSharedNamespaceLister implements the FirewallSharedNamespaceLister
// interface.
type firewallSharedNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all FirewallShareds in the indexer for a given namespace.
func (s firewallSharedNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.FirewallShared, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FirewallShared))
	})
	return ret, err
}

// Get retrieves the FirewallShared from the indexer for a given namespace and name.
func (s firewallSharedNamespaceLister) Get(name string) (*v1alpha1.FirewallShared, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("firewallshared"), name)
	}
	return obj.(*v1alpha1.FirewallShared), nil
}
