/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-ibm-api/apis/container/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AddonsLister helps list Addonses.
// All objects returned here must be treated as read-only.
type AddonsLister interface {
	// List lists all Addonses in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Addons, err error)
	// Addonses returns an object that can list and get Addonses.
	Addonses(namespace string) AddonsNamespaceLister
	AddonsListerExpansion
}

// addonsLister implements the AddonsLister interface.
type addonsLister struct {
	indexer cache.Indexer
}

// NewAddonsLister returns a new AddonsLister.
func NewAddonsLister(indexer cache.Indexer) AddonsLister {
	return &addonsLister{indexer: indexer}
}

// List lists all Addonses in the indexer.
func (s *addonsLister) List(selector labels.Selector) (ret []*v1alpha1.Addons, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Addons))
	})
	return ret, err
}

// Addonses returns an object that can list and get Addonses.
func (s *addonsLister) Addonses(namespace string) AddonsNamespaceLister {
	return addonsNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AddonsNamespaceLister helps list and get Addonses.
// All objects returned here must be treated as read-only.
type AddonsNamespaceLister interface {
	// List lists all Addonses in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Addons, err error)
	// Get retrieves the Addons from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Addons, error)
	AddonsNamespaceListerExpansion
}

// addonsNamespaceLister implements the AddonsNamespaceLister
// interface.
type addonsNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Addonses in the indexer for a given namespace.
func (s addonsNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Addons, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Addons))
	})
	return ret, err
}

// Get retrieves the Addons from the indexer for a given namespace and name.
func (s addonsNamespaceLister) Get(name string) (*v1alpha1.Addons, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("addons"), name)
	}
	return obj.(*v1alpha1.Addons), nil
}
