/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-ibm-api/apis/container/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ApiKeyResetLister helps list ApiKeyResets.
// All objects returned here must be treated as read-only.
type ApiKeyResetLister interface {
	// List lists all ApiKeyResets in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ApiKeyReset, err error)
	// ApiKeyResets returns an object that can list and get ApiKeyResets.
	ApiKeyResets(namespace string) ApiKeyResetNamespaceLister
	ApiKeyResetListerExpansion
}

// apiKeyResetLister implements the ApiKeyResetLister interface.
type apiKeyResetLister struct {
	indexer cache.Indexer
}

// NewApiKeyResetLister returns a new ApiKeyResetLister.
func NewApiKeyResetLister(indexer cache.Indexer) ApiKeyResetLister {
	return &apiKeyResetLister{indexer: indexer}
}

// List lists all ApiKeyResets in the indexer.
func (s *apiKeyResetLister) List(selector labels.Selector) (ret []*v1alpha1.ApiKeyReset, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ApiKeyReset))
	})
	return ret, err
}

// ApiKeyResets returns an object that can list and get ApiKeyResets.
func (s *apiKeyResetLister) ApiKeyResets(namespace string) ApiKeyResetNamespaceLister {
	return apiKeyResetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ApiKeyResetNamespaceLister helps list and get ApiKeyResets.
// All objects returned here must be treated as read-only.
type ApiKeyResetNamespaceLister interface {
	// List lists all ApiKeyResets in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ApiKeyReset, err error)
	// Get retrieves the ApiKeyReset from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ApiKeyReset, error)
	ApiKeyResetNamespaceListerExpansion
}

// apiKeyResetNamespaceLister implements the ApiKeyResetNamespaceLister
// interface.
type apiKeyResetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ApiKeyResets in the indexer for a given namespace.
func (s apiKeyResetNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ApiKeyReset, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ApiKeyReset))
	})
	return ret, err
}

// Get retrieves the ApiKeyReset from the indexer for a given namespace and name.
func (s apiKeyResetNamespaceLister) Get(name string) (*v1alpha1.ApiKeyReset, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("apikeyreset"), name)
	}
	return obj.(*v1alpha1.ApiKeyReset), nil
}
