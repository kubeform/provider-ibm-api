/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-ibm-api/apis/container/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VpcClusterLister helps list VpcClusters.
// All objects returned here must be treated as read-only.
type VpcClusterLister interface {
	// List lists all VpcClusters in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VpcCluster, err error)
	// VpcClusters returns an object that can list and get VpcClusters.
	VpcClusters(namespace string) VpcClusterNamespaceLister
	VpcClusterListerExpansion
}

// vpcClusterLister implements the VpcClusterLister interface.
type vpcClusterLister struct {
	indexer cache.Indexer
}

// NewVpcClusterLister returns a new VpcClusterLister.
func NewVpcClusterLister(indexer cache.Indexer) VpcClusterLister {
	return &vpcClusterLister{indexer: indexer}
}

// List lists all VpcClusters in the indexer.
func (s *vpcClusterLister) List(selector labels.Selector) (ret []*v1alpha1.VpcCluster, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VpcCluster))
	})
	return ret, err
}

// VpcClusters returns an object that can list and get VpcClusters.
func (s *vpcClusterLister) VpcClusters(namespace string) VpcClusterNamespaceLister {
	return vpcClusterNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VpcClusterNamespaceLister helps list and get VpcClusters.
// All objects returned here must be treated as read-only.
type VpcClusterNamespaceLister interface {
	// List lists all VpcClusters in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VpcCluster, err error)
	// Get retrieves the VpcCluster from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.VpcCluster, error)
	VpcClusterNamespaceListerExpansion
}

// vpcClusterNamespaceLister implements the VpcClusterNamespaceLister
// interface.
type vpcClusterNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all VpcClusters in the indexer for a given namespace.
func (s vpcClusterNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.VpcCluster, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VpcCluster))
	})
	return ret, err
}

// Get retrieves the VpcCluster from the indexer for a given namespace and name.
func (s vpcClusterNamespaceLister) Get(name string) (*v1alpha1.VpcCluster, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("vpccluster"), name)
	}
	return obj.(*v1alpha1.VpcCluster), nil
}
