/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-ibm-api/apis/container/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// WorkerPoolLister helps list WorkerPools.
// All objects returned here must be treated as read-only.
type WorkerPoolLister interface {
	// List lists all WorkerPools in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.WorkerPool, err error)
	// WorkerPools returns an object that can list and get WorkerPools.
	WorkerPools(namespace string) WorkerPoolNamespaceLister
	WorkerPoolListerExpansion
}

// workerPoolLister implements the WorkerPoolLister interface.
type workerPoolLister struct {
	indexer cache.Indexer
}

// NewWorkerPoolLister returns a new WorkerPoolLister.
func NewWorkerPoolLister(indexer cache.Indexer) WorkerPoolLister {
	return &workerPoolLister{indexer: indexer}
}

// List lists all WorkerPools in the indexer.
func (s *workerPoolLister) List(selector labels.Selector) (ret []*v1alpha1.WorkerPool, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.WorkerPool))
	})
	return ret, err
}

// WorkerPools returns an object that can list and get WorkerPools.
func (s *workerPoolLister) WorkerPools(namespace string) WorkerPoolNamespaceLister {
	return workerPoolNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// WorkerPoolNamespaceLister helps list and get WorkerPools.
// All objects returned here must be treated as read-only.
type WorkerPoolNamespaceLister interface {
	// List lists all WorkerPools in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.WorkerPool, err error)
	// Get retrieves the WorkerPool from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.WorkerPool, error)
	WorkerPoolNamespaceListerExpansion
}

// workerPoolNamespaceLister implements the WorkerPoolNamespaceLister
// interface.
type workerPoolNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all WorkerPools in the indexer for a given namespace.
func (s workerPoolNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.WorkerPool, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.WorkerPool))
	})
	return ret, err
}

// Get retrieves the WorkerPool from the indexer for a given namespace and name.
func (s workerPoolNamespaceLister) Get(name string) (*v1alpha1.WorkerPool, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("workerpool"), name)
	}
	return obj.(*v1alpha1.WorkerPool), nil
}
