/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-ibm-api/apis/pi/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// NetworkPortLister helps list NetworkPorts.
// All objects returned here must be treated as read-only.
type NetworkPortLister interface {
	// List lists all NetworkPorts in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.NetworkPort, err error)
	// NetworkPorts returns an object that can list and get NetworkPorts.
	NetworkPorts(namespace string) NetworkPortNamespaceLister
	NetworkPortListerExpansion
}

// networkPortLister implements the NetworkPortLister interface.
type networkPortLister struct {
	indexer cache.Indexer
}

// NewNetworkPortLister returns a new NetworkPortLister.
func NewNetworkPortLister(indexer cache.Indexer) NetworkPortLister {
	return &networkPortLister{indexer: indexer}
}

// List lists all NetworkPorts in the indexer.
func (s *networkPortLister) List(selector labels.Selector) (ret []*v1alpha1.NetworkPort, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NetworkPort))
	})
	return ret, err
}

// NetworkPorts returns an object that can list and get NetworkPorts.
func (s *networkPortLister) NetworkPorts(namespace string) NetworkPortNamespaceLister {
	return networkPortNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// NetworkPortNamespaceLister helps list and get NetworkPorts.
// All objects returned here must be treated as read-only.
type NetworkPortNamespaceLister interface {
	// List lists all NetworkPorts in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.NetworkPort, err error)
	// Get retrieves the NetworkPort from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.NetworkPort, error)
	NetworkPortNamespaceListerExpansion
}

// networkPortNamespaceLister implements the NetworkPortNamespaceLister
// interface.
type networkPortNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all NetworkPorts in the indexer for a given namespace.
func (s networkPortNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.NetworkPort, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NetworkPort))
	})
	return ret, err
}

// Get retrieves the NetworkPort from the indexer for a given namespace and name.
func (s networkPortNamespaceLister) Get(name string) (*v1alpha1.NetworkPort, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("networkport"), name)
	}
	return obj.(*v1alpha1.NetworkPort), nil
}
