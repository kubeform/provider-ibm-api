/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-ibm-api/apis/pi/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// NetworkPortAttachLister helps list NetworkPortAttaches.
// All objects returned here must be treated as read-only.
type NetworkPortAttachLister interface {
	// List lists all NetworkPortAttaches in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.NetworkPortAttach, err error)
	// NetworkPortAttaches returns an object that can list and get NetworkPortAttaches.
	NetworkPortAttaches(namespace string) NetworkPortAttachNamespaceLister
	NetworkPortAttachListerExpansion
}

// networkPortAttachLister implements the NetworkPortAttachLister interface.
type networkPortAttachLister struct {
	indexer cache.Indexer
}

// NewNetworkPortAttachLister returns a new NetworkPortAttachLister.
func NewNetworkPortAttachLister(indexer cache.Indexer) NetworkPortAttachLister {
	return &networkPortAttachLister{indexer: indexer}
}

// List lists all NetworkPortAttaches in the indexer.
func (s *networkPortAttachLister) List(selector labels.Selector) (ret []*v1alpha1.NetworkPortAttach, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NetworkPortAttach))
	})
	return ret, err
}

// NetworkPortAttaches returns an object that can list and get NetworkPortAttaches.
func (s *networkPortAttachLister) NetworkPortAttaches(namespace string) NetworkPortAttachNamespaceLister {
	return networkPortAttachNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// NetworkPortAttachNamespaceLister helps list and get NetworkPortAttaches.
// All objects returned here must be treated as read-only.
type NetworkPortAttachNamespaceLister interface {
	// List lists all NetworkPortAttaches in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.NetworkPortAttach, err error)
	// Get retrieves the NetworkPortAttach from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.NetworkPortAttach, error)
	NetworkPortAttachNamespaceListerExpansion
}

// networkPortAttachNamespaceLister implements the NetworkPortAttachNamespaceLister
// interface.
type networkPortAttachNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all NetworkPortAttaches in the indexer for a given namespace.
func (s networkPortAttachNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.NetworkPortAttach, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NetworkPortAttach))
	})
	return ret, err
}

// Get retrieves the NetworkPortAttach from the indexer for a given namespace and name.
func (s networkPortAttachNamespaceLister) Get(name string) (*v1alpha1.NetworkPortAttach, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("networkportattach"), name)
	}
	return obj.(*v1alpha1.NetworkPortAttach), nil
}
