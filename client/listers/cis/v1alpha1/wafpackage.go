/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-ibm-api/apis/cis/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// WafPackageLister helps list WafPackages.
// All objects returned here must be treated as read-only.
type WafPackageLister interface {
	// List lists all WafPackages in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.WafPackage, err error)
	// WafPackages returns an object that can list and get WafPackages.
	WafPackages(namespace string) WafPackageNamespaceLister
	WafPackageListerExpansion
}

// wafPackageLister implements the WafPackageLister interface.
type wafPackageLister struct {
	indexer cache.Indexer
}

// NewWafPackageLister returns a new WafPackageLister.
func NewWafPackageLister(indexer cache.Indexer) WafPackageLister {
	return &wafPackageLister{indexer: indexer}
}

// List lists all WafPackages in the indexer.
func (s *wafPackageLister) List(selector labels.Selector) (ret []*v1alpha1.WafPackage, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.WafPackage))
	})
	return ret, err
}

// WafPackages returns an object that can list and get WafPackages.
func (s *wafPackageLister) WafPackages(namespace string) WafPackageNamespaceLister {
	return wafPackageNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// WafPackageNamespaceLister helps list and get WafPackages.
// All objects returned here must be treated as read-only.
type WafPackageNamespaceLister interface {
	// List lists all WafPackages in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.WafPackage, err error)
	// Get retrieves the WafPackage from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.WafPackage, error)
	WafPackageNamespaceListerExpansion
}

// wafPackageNamespaceLister implements the WafPackageNamespaceLister
// interface.
type wafPackageNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all WafPackages in the indexer for a given namespace.
func (s wafPackageNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.WafPackage, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.WafPackage))
	})
	return ret, err
}

// Get retrieves the WafPackage from the indexer for a given namespace and name.
func (s wafPackageNamespaceLister) Get(name string) (*v1alpha1.WafPackage, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("wafpackage"), name)
	}
	return obj.(*v1alpha1.WafPackage), nil
}
