/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-ibm-api/apis/cis/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PageRuleLister helps list PageRules.
// All objects returned here must be treated as read-only.
type PageRuleLister interface {
	// List lists all PageRules in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PageRule, err error)
	// PageRules returns an object that can list and get PageRules.
	PageRules(namespace string) PageRuleNamespaceLister
	PageRuleListerExpansion
}

// pageRuleLister implements the PageRuleLister interface.
type pageRuleLister struct {
	indexer cache.Indexer
}

// NewPageRuleLister returns a new PageRuleLister.
func NewPageRuleLister(indexer cache.Indexer) PageRuleLister {
	return &pageRuleLister{indexer: indexer}
}

// List lists all PageRules in the indexer.
func (s *pageRuleLister) List(selector labels.Selector) (ret []*v1alpha1.PageRule, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PageRule))
	})
	return ret, err
}

// PageRules returns an object that can list and get PageRules.
func (s *pageRuleLister) PageRules(namespace string) PageRuleNamespaceLister {
	return pageRuleNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PageRuleNamespaceLister helps list and get PageRules.
// All objects returned here must be treated as read-only.
type PageRuleNamespaceLister interface {
	// List lists all PageRules in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PageRule, err error)
	// Get retrieves the PageRule from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.PageRule, error)
	PageRuleNamespaceListerExpansion
}

// pageRuleNamespaceLister implements the PageRuleNamespaceLister
// interface.
type pageRuleNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PageRules in the indexer for a given namespace.
func (s pageRuleNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.PageRule, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PageRule))
	})
	return ret, err
}

// Get retrieves the PageRule from the indexer for a given namespace and name.
func (s pageRuleNamespaceLister) Get(name string) (*v1alpha1.PageRule, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("pagerule"), name)
	}
	return obj.(*v1alpha1.PageRule), nil
}
