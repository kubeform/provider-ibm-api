/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-ibm-api/apis/cis/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RangeAppLister helps list RangeApps.
// All objects returned here must be treated as read-only.
type RangeAppLister interface {
	// List lists all RangeApps in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RangeApp, err error)
	// RangeApps returns an object that can list and get RangeApps.
	RangeApps(namespace string) RangeAppNamespaceLister
	RangeAppListerExpansion
}

// rangeAppLister implements the RangeAppLister interface.
type rangeAppLister struct {
	indexer cache.Indexer
}

// NewRangeAppLister returns a new RangeAppLister.
func NewRangeAppLister(indexer cache.Indexer) RangeAppLister {
	return &rangeAppLister{indexer: indexer}
}

// List lists all RangeApps in the indexer.
func (s *rangeAppLister) List(selector labels.Selector) (ret []*v1alpha1.RangeApp, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RangeApp))
	})
	return ret, err
}

// RangeApps returns an object that can list and get RangeApps.
func (s *rangeAppLister) RangeApps(namespace string) RangeAppNamespaceLister {
	return rangeAppNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RangeAppNamespaceLister helps list and get RangeApps.
// All objects returned here must be treated as read-only.
type RangeAppNamespaceLister interface {
	// List lists all RangeApps in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RangeApp, err error)
	// Get retrieves the RangeApp from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.RangeApp, error)
	RangeAppNamespaceListerExpansion
}

// rangeAppNamespaceLister implements the RangeAppNamespaceLister
// interface.
type rangeAppNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all RangeApps in the indexer for a given namespace.
func (s rangeAppNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.RangeApp, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RangeApp))
	})
	return ret, err
}

// Get retrieves the RangeApp from the indexer for a given namespace and name.
func (s rangeAppNamespaceLister) Get(name string) (*v1alpha1.RangeApp, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("rangeapp"), name)
	}
	return obj.(*v1alpha1.RangeApp), nil
}
