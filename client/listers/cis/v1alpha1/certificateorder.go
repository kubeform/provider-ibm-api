/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-ibm-api/apis/cis/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CertificateOrderLister helps list CertificateOrders.
// All objects returned here must be treated as read-only.
type CertificateOrderLister interface {
	// List lists all CertificateOrders in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CertificateOrder, err error)
	// CertificateOrders returns an object that can list and get CertificateOrders.
	CertificateOrders(namespace string) CertificateOrderNamespaceLister
	CertificateOrderListerExpansion
}

// certificateOrderLister implements the CertificateOrderLister interface.
type certificateOrderLister struct {
	indexer cache.Indexer
}

// NewCertificateOrderLister returns a new CertificateOrderLister.
func NewCertificateOrderLister(indexer cache.Indexer) CertificateOrderLister {
	return &certificateOrderLister{indexer: indexer}
}

// List lists all CertificateOrders in the indexer.
func (s *certificateOrderLister) List(selector labels.Selector) (ret []*v1alpha1.CertificateOrder, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CertificateOrder))
	})
	return ret, err
}

// CertificateOrders returns an object that can list and get CertificateOrders.
func (s *certificateOrderLister) CertificateOrders(namespace string) CertificateOrderNamespaceLister {
	return certificateOrderNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CertificateOrderNamespaceLister helps list and get CertificateOrders.
// All objects returned here must be treated as read-only.
type CertificateOrderNamespaceLister interface {
	// List lists all CertificateOrders in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CertificateOrder, err error)
	// Get retrieves the CertificateOrder from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.CertificateOrder, error)
	CertificateOrderNamespaceListerExpansion
}

// certificateOrderNamespaceLister implements the CertificateOrderNamespaceLister
// interface.
type certificateOrderNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CertificateOrders in the indexer for a given namespace.
func (s certificateOrderNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.CertificateOrder, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CertificateOrder))
	})
	return ret, err
}

// Get retrieves the CertificateOrder from the indexer for a given namespace and name.
func (s certificateOrderNamespaceLister) Get(name string) (*v1alpha1.CertificateOrder, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("certificateorder"), name)
	}
	return obj.(*v1alpha1.CertificateOrder), nil
}
