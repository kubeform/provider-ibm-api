/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-ibm-api/apis/cis/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CertificateUploadLister helps list CertificateUploads.
// All objects returned here must be treated as read-only.
type CertificateUploadLister interface {
	// List lists all CertificateUploads in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CertificateUpload, err error)
	// CertificateUploads returns an object that can list and get CertificateUploads.
	CertificateUploads(namespace string) CertificateUploadNamespaceLister
	CertificateUploadListerExpansion
}

// certificateUploadLister implements the CertificateUploadLister interface.
type certificateUploadLister struct {
	indexer cache.Indexer
}

// NewCertificateUploadLister returns a new CertificateUploadLister.
func NewCertificateUploadLister(indexer cache.Indexer) CertificateUploadLister {
	return &certificateUploadLister{indexer: indexer}
}

// List lists all CertificateUploads in the indexer.
func (s *certificateUploadLister) List(selector labels.Selector) (ret []*v1alpha1.CertificateUpload, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CertificateUpload))
	})
	return ret, err
}

// CertificateUploads returns an object that can list and get CertificateUploads.
func (s *certificateUploadLister) CertificateUploads(namespace string) CertificateUploadNamespaceLister {
	return certificateUploadNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CertificateUploadNamespaceLister helps list and get CertificateUploads.
// All objects returned here must be treated as read-only.
type CertificateUploadNamespaceLister interface {
	// List lists all CertificateUploads in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CertificateUpload, err error)
	// Get retrieves the CertificateUpload from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.CertificateUpload, error)
	CertificateUploadNamespaceListerExpansion
}

// certificateUploadNamespaceLister implements the CertificateUploadNamespaceLister
// interface.
type certificateUploadNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CertificateUploads in the indexer for a given namespace.
func (s certificateUploadNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.CertificateUpload, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CertificateUpload))
	})
	return ret, err
}

// Get retrieves the CertificateUpload from the indexer for a given namespace and name.
func (s certificateUploadNamespaceLister) Get(name string) (*v1alpha1.CertificateUpload, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("certificateupload"), name)
	}
	return obj.(*v1alpha1.CertificateUpload), nil
}
