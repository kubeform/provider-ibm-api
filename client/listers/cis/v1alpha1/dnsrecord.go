/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-ibm-api/apis/cis/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DnsRecordLister helps list DnsRecords.
// All objects returned here must be treated as read-only.
type DnsRecordLister interface {
	// List lists all DnsRecords in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DnsRecord, err error)
	// DnsRecords returns an object that can list and get DnsRecords.
	DnsRecords(namespace string) DnsRecordNamespaceLister
	DnsRecordListerExpansion
}

// dnsRecordLister implements the DnsRecordLister interface.
type dnsRecordLister struct {
	indexer cache.Indexer
}

// NewDnsRecordLister returns a new DnsRecordLister.
func NewDnsRecordLister(indexer cache.Indexer) DnsRecordLister {
	return &dnsRecordLister{indexer: indexer}
}

// List lists all DnsRecords in the indexer.
func (s *dnsRecordLister) List(selector labels.Selector) (ret []*v1alpha1.DnsRecord, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DnsRecord))
	})
	return ret, err
}

// DnsRecords returns an object that can list and get DnsRecords.
func (s *dnsRecordLister) DnsRecords(namespace string) DnsRecordNamespaceLister {
	return dnsRecordNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DnsRecordNamespaceLister helps list and get DnsRecords.
// All objects returned here must be treated as read-only.
type DnsRecordNamespaceLister interface {
	// List lists all DnsRecords in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DnsRecord, err error)
	// Get retrieves the DnsRecord from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.DnsRecord, error)
	DnsRecordNamespaceListerExpansion
}

// dnsRecordNamespaceLister implements the DnsRecordNamespaceLister
// interface.
type dnsRecordNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DnsRecords in the indexer for a given namespace.
func (s dnsRecordNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DnsRecord, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DnsRecord))
	})
	return ret, err
}

// Get retrieves the DnsRecord from the indexer for a given namespace and name.
func (s dnsRecordNamespaceLister) Get(name string) (*v1alpha1.DnsRecord, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("dnsrecord"), name)
	}
	return obj.(*v1alpha1.DnsRecord), nil
}
