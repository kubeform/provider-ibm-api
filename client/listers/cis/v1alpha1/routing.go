/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-ibm-api/apis/cis/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RoutingLister helps list Routings.
// All objects returned here must be treated as read-only.
type RoutingLister interface {
	// List lists all Routings in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Routing, err error)
	// Routings returns an object that can list and get Routings.
	Routings(namespace string) RoutingNamespaceLister
	RoutingListerExpansion
}

// routingLister implements the RoutingLister interface.
type routingLister struct {
	indexer cache.Indexer
}

// NewRoutingLister returns a new RoutingLister.
func NewRoutingLister(indexer cache.Indexer) RoutingLister {
	return &routingLister{indexer: indexer}
}

// List lists all Routings in the indexer.
func (s *routingLister) List(selector labels.Selector) (ret []*v1alpha1.Routing, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Routing))
	})
	return ret, err
}

// Routings returns an object that can list and get Routings.
func (s *routingLister) Routings(namespace string) RoutingNamespaceLister {
	return routingNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RoutingNamespaceLister helps list and get Routings.
// All objects returned here must be treated as read-only.
type RoutingNamespaceLister interface {
	// List lists all Routings in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Routing, err error)
	// Get retrieves the Routing from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Routing, error)
	RoutingNamespaceListerExpansion
}

// routingNamespaceLister implements the RoutingNamespaceLister
// interface.
type routingNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Routings in the indexer for a given namespace.
func (s routingNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Routing, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Routing))
	})
	return ret, err
}

// Get retrieves the Routing from the indexer for a given namespace and name.
func (s routingNamespaceLister) Get(name string) (*v1alpha1.Routing, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("routing"), name)
	}
	return obj.(*v1alpha1.Routing), nil
}
