/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-ibm-api/apis/cis/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DomainSettingsLister helps list DomainSettingses.
// All objects returned here must be treated as read-only.
type DomainSettingsLister interface {
	// List lists all DomainSettingses in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DomainSettings, err error)
	// DomainSettingses returns an object that can list and get DomainSettingses.
	DomainSettingses(namespace string) DomainSettingsNamespaceLister
	DomainSettingsListerExpansion
}

// domainSettingsLister implements the DomainSettingsLister interface.
type domainSettingsLister struct {
	indexer cache.Indexer
}

// NewDomainSettingsLister returns a new DomainSettingsLister.
func NewDomainSettingsLister(indexer cache.Indexer) DomainSettingsLister {
	return &domainSettingsLister{indexer: indexer}
}

// List lists all DomainSettingses in the indexer.
func (s *domainSettingsLister) List(selector labels.Selector) (ret []*v1alpha1.DomainSettings, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DomainSettings))
	})
	return ret, err
}

// DomainSettingses returns an object that can list and get DomainSettingses.
func (s *domainSettingsLister) DomainSettingses(namespace string) DomainSettingsNamespaceLister {
	return domainSettingsNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DomainSettingsNamespaceLister helps list and get DomainSettingses.
// All objects returned here must be treated as read-only.
type DomainSettingsNamespaceLister interface {
	// List lists all DomainSettingses in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DomainSettings, err error)
	// Get retrieves the DomainSettings from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.DomainSettings, error)
	DomainSettingsNamespaceListerExpansion
}

// domainSettingsNamespaceLister implements the DomainSettingsNamespaceLister
// interface.
type domainSettingsNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DomainSettingses in the indexer for a given namespace.
func (s domainSettingsNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DomainSettings, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DomainSettings))
	})
	return ret, err
}

// Get retrieves the DomainSettings from the indexer for a given namespace and name.
func (s domainSettingsNamespaceLister) Get(name string) (*v1alpha1.DomainSettings, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("domainsettings"), name)
	}
	return obj.(*v1alpha1.DomainSettings), nil
}
