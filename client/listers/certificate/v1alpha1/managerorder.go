/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-ibm-api/apis/certificate/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ManagerOrderLister helps list ManagerOrders.
// All objects returned here must be treated as read-only.
type ManagerOrderLister interface {
	// List lists all ManagerOrders in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ManagerOrder, err error)
	// ManagerOrders returns an object that can list and get ManagerOrders.
	ManagerOrders(namespace string) ManagerOrderNamespaceLister
	ManagerOrderListerExpansion
}

// managerOrderLister implements the ManagerOrderLister interface.
type managerOrderLister struct {
	indexer cache.Indexer
}

// NewManagerOrderLister returns a new ManagerOrderLister.
func NewManagerOrderLister(indexer cache.Indexer) ManagerOrderLister {
	return &managerOrderLister{indexer: indexer}
}

// List lists all ManagerOrders in the indexer.
func (s *managerOrderLister) List(selector labels.Selector) (ret []*v1alpha1.ManagerOrder, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ManagerOrder))
	})
	return ret, err
}

// ManagerOrders returns an object that can list and get ManagerOrders.
func (s *managerOrderLister) ManagerOrders(namespace string) ManagerOrderNamespaceLister {
	return managerOrderNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ManagerOrderNamespaceLister helps list and get ManagerOrders.
// All objects returned here must be treated as read-only.
type ManagerOrderNamespaceLister interface {
	// List lists all ManagerOrders in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ManagerOrder, err error)
	// Get retrieves the ManagerOrder from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ManagerOrder, error)
	ManagerOrderNamespaceListerExpansion
}

// managerOrderNamespaceLister implements the ManagerOrderNamespaceLister
// interface.
type managerOrderNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ManagerOrders in the indexer for a given namespace.
func (s managerOrderNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ManagerOrder, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ManagerOrder))
	})
	return ret, err
}

// Get retrieves the ManagerOrder from the indexer for a given namespace and name.
func (s managerOrderNamespaceLister) Get(name string) (*v1alpha1.ManagerOrder, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("managerorder"), name)
	}
	return obj.(*v1alpha1.ManagerOrder), nil
}
