/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-ibm-api/apis/certificate/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ManagerImportLister helps list ManagerImports.
// All objects returned here must be treated as read-only.
type ManagerImportLister interface {
	// List lists all ManagerImports in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ManagerImport, err error)
	// ManagerImports returns an object that can list and get ManagerImports.
	ManagerImports(namespace string) ManagerImportNamespaceLister
	ManagerImportListerExpansion
}

// managerImportLister implements the ManagerImportLister interface.
type managerImportLister struct {
	indexer cache.Indexer
}

// NewManagerImportLister returns a new ManagerImportLister.
func NewManagerImportLister(indexer cache.Indexer) ManagerImportLister {
	return &managerImportLister{indexer: indexer}
}

// List lists all ManagerImports in the indexer.
func (s *managerImportLister) List(selector labels.Selector) (ret []*v1alpha1.ManagerImport, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ManagerImport))
	})
	return ret, err
}

// ManagerImports returns an object that can list and get ManagerImports.
func (s *managerImportLister) ManagerImports(namespace string) ManagerImportNamespaceLister {
	return managerImportNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ManagerImportNamespaceLister helps list and get ManagerImports.
// All objects returned here must be treated as read-only.
type ManagerImportNamespaceLister interface {
	// List lists all ManagerImports in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ManagerImport, err error)
	// Get retrieves the ManagerImport from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ManagerImport, error)
	ManagerImportNamespaceListerExpansion
}

// managerImportNamespaceLister implements the ManagerImportNamespaceLister
// interface.
type managerImportNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ManagerImports in the indexer for a given namespace.
func (s managerImportNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ManagerImport, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ManagerImport))
	})
	return ret, err
}

// Get retrieves the ManagerImport from the indexer for a given namespace and name.
func (s managerImportNamespaceLister) Get(name string) (*v1alpha1.ManagerImport, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("managerimport"), name)
	}
	return obj.(*v1alpha1.ManagerImport), nil
}
