/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-ibm-api/apis/api/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// GatewayEndpointLister helps list GatewayEndpoints.
// All objects returned here must be treated as read-only.
type GatewayEndpointLister interface {
	// List lists all GatewayEndpoints in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.GatewayEndpoint, err error)
	// GatewayEndpoints returns an object that can list and get GatewayEndpoints.
	GatewayEndpoints(namespace string) GatewayEndpointNamespaceLister
	GatewayEndpointListerExpansion
}

// gatewayEndpointLister implements the GatewayEndpointLister interface.
type gatewayEndpointLister struct {
	indexer cache.Indexer
}

// NewGatewayEndpointLister returns a new GatewayEndpointLister.
func NewGatewayEndpointLister(indexer cache.Indexer) GatewayEndpointLister {
	return &gatewayEndpointLister{indexer: indexer}
}

// List lists all GatewayEndpoints in the indexer.
func (s *gatewayEndpointLister) List(selector labels.Selector) (ret []*v1alpha1.GatewayEndpoint, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GatewayEndpoint))
	})
	return ret, err
}

// GatewayEndpoints returns an object that can list and get GatewayEndpoints.
func (s *gatewayEndpointLister) GatewayEndpoints(namespace string) GatewayEndpointNamespaceLister {
	return gatewayEndpointNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// GatewayEndpointNamespaceLister helps list and get GatewayEndpoints.
// All objects returned here must be treated as read-only.
type GatewayEndpointNamespaceLister interface {
	// List lists all GatewayEndpoints in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.GatewayEndpoint, err error)
	// Get retrieves the GatewayEndpoint from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.GatewayEndpoint, error)
	GatewayEndpointNamespaceListerExpansion
}

// gatewayEndpointNamespaceLister implements the GatewayEndpointNamespaceLister
// interface.
type gatewayEndpointNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all GatewayEndpoints in the indexer for a given namespace.
func (s gatewayEndpointNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.GatewayEndpoint, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GatewayEndpoint))
	})
	return ret, err
}

// Get retrieves the GatewayEndpoint from the indexer for a given namespace and name.
func (s gatewayEndpointNamespaceLister) Get(name string) (*v1alpha1.GatewayEndpoint, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("gatewayendpoint"), name)
	}
	return obj.(*v1alpha1.GatewayEndpoint), nil
}
