/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-ibm-api/apis/api/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// GatewayEndpointSubscriptionLister helps list GatewayEndpointSubscriptions.
// All objects returned here must be treated as read-only.
type GatewayEndpointSubscriptionLister interface {
	// List lists all GatewayEndpointSubscriptions in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.GatewayEndpointSubscription, err error)
	// GatewayEndpointSubscriptions returns an object that can list and get GatewayEndpointSubscriptions.
	GatewayEndpointSubscriptions(namespace string) GatewayEndpointSubscriptionNamespaceLister
	GatewayEndpointSubscriptionListerExpansion
}

// gatewayEndpointSubscriptionLister implements the GatewayEndpointSubscriptionLister interface.
type gatewayEndpointSubscriptionLister struct {
	indexer cache.Indexer
}

// NewGatewayEndpointSubscriptionLister returns a new GatewayEndpointSubscriptionLister.
func NewGatewayEndpointSubscriptionLister(indexer cache.Indexer) GatewayEndpointSubscriptionLister {
	return &gatewayEndpointSubscriptionLister{indexer: indexer}
}

// List lists all GatewayEndpointSubscriptions in the indexer.
func (s *gatewayEndpointSubscriptionLister) List(selector labels.Selector) (ret []*v1alpha1.GatewayEndpointSubscription, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GatewayEndpointSubscription))
	})
	return ret, err
}

// GatewayEndpointSubscriptions returns an object that can list and get GatewayEndpointSubscriptions.
func (s *gatewayEndpointSubscriptionLister) GatewayEndpointSubscriptions(namespace string) GatewayEndpointSubscriptionNamespaceLister {
	return gatewayEndpointSubscriptionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// GatewayEndpointSubscriptionNamespaceLister helps list and get GatewayEndpointSubscriptions.
// All objects returned here must be treated as read-only.
type GatewayEndpointSubscriptionNamespaceLister interface {
	// List lists all GatewayEndpointSubscriptions in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.GatewayEndpointSubscription, err error)
	// Get retrieves the GatewayEndpointSubscription from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.GatewayEndpointSubscription, error)
	GatewayEndpointSubscriptionNamespaceListerExpansion
}

// gatewayEndpointSubscriptionNamespaceLister implements the GatewayEndpointSubscriptionNamespaceLister
// interface.
type gatewayEndpointSubscriptionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all GatewayEndpointSubscriptions in the indexer for a given namespace.
func (s gatewayEndpointSubscriptionNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.GatewayEndpointSubscription, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GatewayEndpointSubscription))
	})
	return ret, err
}

// Get retrieves the GatewayEndpointSubscription from the indexer for a given namespace and name.
func (s gatewayEndpointSubscriptionNamespaceLister) Get(name string) (*v1alpha1.GatewayEndpointSubscription, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("gatewayendpointsubscription"), name)
	}
	return obj.(*v1alpha1.GatewayEndpointSubscription), nil
}
