/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-ibm-api/apis/hpcs/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// HpcsLister helps list Hpcses.
// All objects returned here must be treated as read-only.
type HpcsLister interface {
	// List lists all Hpcses in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Hpcs, err error)
	// Hpcses returns an object that can list and get Hpcses.
	Hpcses(namespace string) HpcsNamespaceLister
	HpcsListerExpansion
}

// hpcsLister implements the HpcsLister interface.
type hpcsLister struct {
	indexer cache.Indexer
}

// NewHpcsLister returns a new HpcsLister.
func NewHpcsLister(indexer cache.Indexer) HpcsLister {
	return &hpcsLister{indexer: indexer}
}

// List lists all Hpcses in the indexer.
func (s *hpcsLister) List(selector labels.Selector) (ret []*v1alpha1.Hpcs, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Hpcs))
	})
	return ret, err
}

// Hpcses returns an object that can list and get Hpcses.
func (s *hpcsLister) Hpcses(namespace string) HpcsNamespaceLister {
	return hpcsNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// HpcsNamespaceLister helps list and get Hpcses.
// All objects returned here must be treated as read-only.
type HpcsNamespaceLister interface {
	// List lists all Hpcses in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Hpcs, err error)
	// Get retrieves the Hpcs from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Hpcs, error)
	HpcsNamespaceListerExpansion
}

// hpcsNamespaceLister implements the HpcsNamespaceLister
// interface.
type hpcsNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Hpcses in the indexer for a given namespace.
func (s hpcsNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Hpcs, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Hpcs))
	})
	return ret, err
}

// Get retrieves the Hpcs from the indexer for a given namespace and name.
func (s hpcsNamespaceLister) Get(name string) (*v1alpha1.Hpcs, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("hpcs"), name)
	}
	return obj.(*v1alpha1.Hpcs), nil
}
