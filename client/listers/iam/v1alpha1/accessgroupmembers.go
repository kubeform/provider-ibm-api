/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-ibm-api/apis/iam/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AccessGroupMembersLister helps list AccessGroupMemberses.
// All objects returned here must be treated as read-only.
type AccessGroupMembersLister interface {
	// List lists all AccessGroupMemberses in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AccessGroupMembers, err error)
	// AccessGroupMemberses returns an object that can list and get AccessGroupMemberses.
	AccessGroupMemberses(namespace string) AccessGroupMembersNamespaceLister
	AccessGroupMembersListerExpansion
}

// accessGroupMembersLister implements the AccessGroupMembersLister interface.
type accessGroupMembersLister struct {
	indexer cache.Indexer
}

// NewAccessGroupMembersLister returns a new AccessGroupMembersLister.
func NewAccessGroupMembersLister(indexer cache.Indexer) AccessGroupMembersLister {
	return &accessGroupMembersLister{indexer: indexer}
}

// List lists all AccessGroupMemberses in the indexer.
func (s *accessGroupMembersLister) List(selector labels.Selector) (ret []*v1alpha1.AccessGroupMembers, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AccessGroupMembers))
	})
	return ret, err
}

// AccessGroupMemberses returns an object that can list and get AccessGroupMemberses.
func (s *accessGroupMembersLister) AccessGroupMemberses(namespace string) AccessGroupMembersNamespaceLister {
	return accessGroupMembersNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AccessGroupMembersNamespaceLister helps list and get AccessGroupMemberses.
// All objects returned here must be treated as read-only.
type AccessGroupMembersNamespaceLister interface {
	// List lists all AccessGroupMemberses in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AccessGroupMembers, err error)
	// Get retrieves the AccessGroupMembers from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AccessGroupMembers, error)
	AccessGroupMembersNamespaceListerExpansion
}

// accessGroupMembersNamespaceLister implements the AccessGroupMembersNamespaceLister
// interface.
type accessGroupMembersNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AccessGroupMemberses in the indexer for a given namespace.
func (s accessGroupMembersNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AccessGroupMembers, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AccessGroupMembers))
	})
	return ret, err
}

// Get retrieves the AccessGroupMembers from the indexer for a given namespace and name.
func (s accessGroupMembersNamespaceLister) Get(name string) (*v1alpha1.AccessGroupMembers, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("accessgroupmembers"), name)
	}
	return obj.(*v1alpha1.AccessGroupMembers), nil
}
