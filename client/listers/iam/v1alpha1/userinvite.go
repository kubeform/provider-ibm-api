/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-ibm-api/apis/iam/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// UserInviteLister helps list UserInvites.
// All objects returned here must be treated as read-only.
type UserInviteLister interface {
	// List lists all UserInvites in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.UserInvite, err error)
	// UserInvites returns an object that can list and get UserInvites.
	UserInvites(namespace string) UserInviteNamespaceLister
	UserInviteListerExpansion
}

// userInviteLister implements the UserInviteLister interface.
type userInviteLister struct {
	indexer cache.Indexer
}

// NewUserInviteLister returns a new UserInviteLister.
func NewUserInviteLister(indexer cache.Indexer) UserInviteLister {
	return &userInviteLister{indexer: indexer}
}

// List lists all UserInvites in the indexer.
func (s *userInviteLister) List(selector labels.Selector) (ret []*v1alpha1.UserInvite, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.UserInvite))
	})
	return ret, err
}

// UserInvites returns an object that can list and get UserInvites.
func (s *userInviteLister) UserInvites(namespace string) UserInviteNamespaceLister {
	return userInviteNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// UserInviteNamespaceLister helps list and get UserInvites.
// All objects returned here must be treated as read-only.
type UserInviteNamespaceLister interface {
	// List lists all UserInvites in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.UserInvite, err error)
	// Get retrieves the UserInvite from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.UserInvite, error)
	UserInviteNamespaceListerExpansion
}

// userInviteNamespaceLister implements the UserInviteNamespaceLister
// interface.
type userInviteNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all UserInvites in the indexer for a given namespace.
func (s userInviteNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.UserInvite, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.UserInvite))
	})
	return ret, err
}

// Get retrieves the UserInvite from the indexer for a given namespace and name.
func (s userInviteNamespaceLister) Get(name string) (*v1alpha1.UserInvite, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("userinvite"), name)
	}
	return obj.(*v1alpha1.UserInvite), nil
}
