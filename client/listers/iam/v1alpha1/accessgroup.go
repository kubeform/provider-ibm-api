/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-ibm-api/apis/iam/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AccessGroupLister helps list AccessGroups.
// All objects returned here must be treated as read-only.
type AccessGroupLister interface {
	// List lists all AccessGroups in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AccessGroup, err error)
	// AccessGroups returns an object that can list and get AccessGroups.
	AccessGroups(namespace string) AccessGroupNamespaceLister
	AccessGroupListerExpansion
}

// accessGroupLister implements the AccessGroupLister interface.
type accessGroupLister struct {
	indexer cache.Indexer
}

// NewAccessGroupLister returns a new AccessGroupLister.
func NewAccessGroupLister(indexer cache.Indexer) AccessGroupLister {
	return &accessGroupLister{indexer: indexer}
}

// List lists all AccessGroups in the indexer.
func (s *accessGroupLister) List(selector labels.Selector) (ret []*v1alpha1.AccessGroup, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AccessGroup))
	})
	return ret, err
}

// AccessGroups returns an object that can list and get AccessGroups.
func (s *accessGroupLister) AccessGroups(namespace string) AccessGroupNamespaceLister {
	return accessGroupNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AccessGroupNamespaceLister helps list and get AccessGroups.
// All objects returned here must be treated as read-only.
type AccessGroupNamespaceLister interface {
	// List lists all AccessGroups in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AccessGroup, err error)
	// Get retrieves the AccessGroup from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AccessGroup, error)
	AccessGroupNamespaceListerExpansion
}

// accessGroupNamespaceLister implements the AccessGroupNamespaceLister
// interface.
type accessGroupNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AccessGroups in the indexer for a given namespace.
func (s accessGroupNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AccessGroup, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AccessGroup))
	})
	return ret, err
}

// Get retrieves the AccessGroup from the indexer for a given namespace and name.
func (s accessGroupNamespaceLister) Get(name string) (*v1alpha1.AccessGroup, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("accessgroup"), name)
	}
	return obj.(*v1alpha1.AccessGroup), nil
}
