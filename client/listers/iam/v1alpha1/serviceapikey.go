/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-ibm-api/apis/iam/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ServiceAPIKeyLister helps list ServiceAPIKeys.
// All objects returned here must be treated as read-only.
type ServiceAPIKeyLister interface {
	// List lists all ServiceAPIKeys in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ServiceAPIKey, err error)
	// ServiceAPIKeys returns an object that can list and get ServiceAPIKeys.
	ServiceAPIKeys(namespace string) ServiceAPIKeyNamespaceLister
	ServiceAPIKeyListerExpansion
}

// serviceAPIKeyLister implements the ServiceAPIKeyLister interface.
type serviceAPIKeyLister struct {
	indexer cache.Indexer
}

// NewServiceAPIKeyLister returns a new ServiceAPIKeyLister.
func NewServiceAPIKeyLister(indexer cache.Indexer) ServiceAPIKeyLister {
	return &serviceAPIKeyLister{indexer: indexer}
}

// List lists all ServiceAPIKeys in the indexer.
func (s *serviceAPIKeyLister) List(selector labels.Selector) (ret []*v1alpha1.ServiceAPIKey, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServiceAPIKey))
	})
	return ret, err
}

// ServiceAPIKeys returns an object that can list and get ServiceAPIKeys.
func (s *serviceAPIKeyLister) ServiceAPIKeys(namespace string) ServiceAPIKeyNamespaceLister {
	return serviceAPIKeyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ServiceAPIKeyNamespaceLister helps list and get ServiceAPIKeys.
// All objects returned here must be treated as read-only.
type ServiceAPIKeyNamespaceLister interface {
	// List lists all ServiceAPIKeys in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ServiceAPIKey, err error)
	// Get retrieves the ServiceAPIKey from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ServiceAPIKey, error)
	ServiceAPIKeyNamespaceListerExpansion
}

// serviceAPIKeyNamespaceLister implements the ServiceAPIKeyNamespaceLister
// interface.
type serviceAPIKeyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ServiceAPIKeys in the indexer for a given namespace.
func (s serviceAPIKeyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ServiceAPIKey, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServiceAPIKey))
	})
	return ret, err
}

// Get retrieves the ServiceAPIKey from the indexer for a given namespace and name.
func (s serviceAPIKeyNamespaceLister) Get(name string) (*v1alpha1.ServiceAPIKey, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("serviceapikey"), name)
	}
	return obj.(*v1alpha1.ServiceAPIKey), nil
}
