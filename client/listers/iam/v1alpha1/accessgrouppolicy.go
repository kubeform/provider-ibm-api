/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-ibm-api/apis/iam/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AccessGroupPolicyLister helps list AccessGroupPolicies.
// All objects returned here must be treated as read-only.
type AccessGroupPolicyLister interface {
	// List lists all AccessGroupPolicies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AccessGroupPolicy, err error)
	// AccessGroupPolicies returns an object that can list and get AccessGroupPolicies.
	AccessGroupPolicies(namespace string) AccessGroupPolicyNamespaceLister
	AccessGroupPolicyListerExpansion
}

// accessGroupPolicyLister implements the AccessGroupPolicyLister interface.
type accessGroupPolicyLister struct {
	indexer cache.Indexer
}

// NewAccessGroupPolicyLister returns a new AccessGroupPolicyLister.
func NewAccessGroupPolicyLister(indexer cache.Indexer) AccessGroupPolicyLister {
	return &accessGroupPolicyLister{indexer: indexer}
}

// List lists all AccessGroupPolicies in the indexer.
func (s *accessGroupPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.AccessGroupPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AccessGroupPolicy))
	})
	return ret, err
}

// AccessGroupPolicies returns an object that can list and get AccessGroupPolicies.
func (s *accessGroupPolicyLister) AccessGroupPolicies(namespace string) AccessGroupPolicyNamespaceLister {
	return accessGroupPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AccessGroupPolicyNamespaceLister helps list and get AccessGroupPolicies.
// All objects returned here must be treated as read-only.
type AccessGroupPolicyNamespaceLister interface {
	// List lists all AccessGroupPolicies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AccessGroupPolicy, err error)
	// Get retrieves the AccessGroupPolicy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AccessGroupPolicy, error)
	AccessGroupPolicyNamespaceListerExpansion
}

// accessGroupPolicyNamespaceLister implements the AccessGroupPolicyNamespaceLister
// interface.
type accessGroupPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AccessGroupPolicies in the indexer for a given namespace.
func (s accessGroupPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AccessGroupPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AccessGroupPolicy))
	})
	return ret, err
}

// Get retrieves the AccessGroupPolicy from the indexer for a given namespace and name.
func (s accessGroupPolicyNamespaceLister) Get(name string) (*v1alpha1.AccessGroupPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("accessgrouppolicy"), name)
	}
	return obj.(*v1alpha1.AccessGroupPolicy), nil
}
