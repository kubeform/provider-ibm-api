/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-ibm-api/apis/iam/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// UserSettingsLister helps list UserSettingses.
// All objects returned here must be treated as read-only.
type UserSettingsLister interface {
	// List lists all UserSettingses in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.UserSettings, err error)
	// UserSettingses returns an object that can list and get UserSettingses.
	UserSettingses(namespace string) UserSettingsNamespaceLister
	UserSettingsListerExpansion
}

// userSettingsLister implements the UserSettingsLister interface.
type userSettingsLister struct {
	indexer cache.Indexer
}

// NewUserSettingsLister returns a new UserSettingsLister.
func NewUserSettingsLister(indexer cache.Indexer) UserSettingsLister {
	return &userSettingsLister{indexer: indexer}
}

// List lists all UserSettingses in the indexer.
func (s *userSettingsLister) List(selector labels.Selector) (ret []*v1alpha1.UserSettings, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.UserSettings))
	})
	return ret, err
}

// UserSettingses returns an object that can list and get UserSettingses.
func (s *userSettingsLister) UserSettingses(namespace string) UserSettingsNamespaceLister {
	return userSettingsNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// UserSettingsNamespaceLister helps list and get UserSettingses.
// All objects returned here must be treated as read-only.
type UserSettingsNamespaceLister interface {
	// List lists all UserSettingses in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.UserSettings, err error)
	// Get retrieves the UserSettings from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.UserSettings, error)
	UserSettingsNamespaceListerExpansion
}

// userSettingsNamespaceLister implements the UserSettingsNamespaceLister
// interface.
type userSettingsNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all UserSettingses in the indexer for a given namespace.
func (s userSettingsNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.UserSettings, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.UserSettings))
	})
	return ret, err
}

// Get retrieves the UserSettings from the indexer for a given namespace and name.
func (s userSettingsNamespaceLister) Get(name string) (*v1alpha1.UserSettings, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("usersettings"), name)
	}
	return obj.(*v1alpha1.UserSettings), nil
}
