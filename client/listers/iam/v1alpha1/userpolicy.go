/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-ibm-api/apis/iam/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// UserPolicyLister helps list UserPolicies.
// All objects returned here must be treated as read-only.
type UserPolicyLister interface {
	// List lists all UserPolicies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.UserPolicy, err error)
	// UserPolicies returns an object that can list and get UserPolicies.
	UserPolicies(namespace string) UserPolicyNamespaceLister
	UserPolicyListerExpansion
}

// userPolicyLister implements the UserPolicyLister interface.
type userPolicyLister struct {
	indexer cache.Indexer
}

// NewUserPolicyLister returns a new UserPolicyLister.
func NewUserPolicyLister(indexer cache.Indexer) UserPolicyLister {
	return &userPolicyLister{indexer: indexer}
}

// List lists all UserPolicies in the indexer.
func (s *userPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.UserPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.UserPolicy))
	})
	return ret, err
}

// UserPolicies returns an object that can list and get UserPolicies.
func (s *userPolicyLister) UserPolicies(namespace string) UserPolicyNamespaceLister {
	return userPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// UserPolicyNamespaceLister helps list and get UserPolicies.
// All objects returned here must be treated as read-only.
type UserPolicyNamespaceLister interface {
	// List lists all UserPolicies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.UserPolicy, err error)
	// Get retrieves the UserPolicy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.UserPolicy, error)
	UserPolicyNamespaceListerExpansion
}

// userPolicyNamespaceLister implements the UserPolicyNamespaceLister
// interface.
type userPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all UserPolicies in the indexer for a given namespace.
func (s userPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.UserPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.UserPolicy))
	})
	return ret, err
}

// Get retrieves the UserPolicy from the indexer for a given namespace and name.
func (s userPolicyNamespaceLister) Get(name string) (*v1alpha1.UserPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("userpolicy"), name)
	}
	return obj.(*v1alpha1.UserPolicy), nil
}
