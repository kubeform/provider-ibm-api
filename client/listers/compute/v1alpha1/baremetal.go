/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-ibm-api/apis/compute/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// BareMetalLister helps list BareMetals.
// All objects returned here must be treated as read-only.
type BareMetalLister interface {
	// List lists all BareMetals in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.BareMetal, err error)
	// BareMetals returns an object that can list and get BareMetals.
	BareMetals(namespace string) BareMetalNamespaceLister
	BareMetalListerExpansion
}

// bareMetalLister implements the BareMetalLister interface.
type bareMetalLister struct {
	indexer cache.Indexer
}

// NewBareMetalLister returns a new BareMetalLister.
func NewBareMetalLister(indexer cache.Indexer) BareMetalLister {
	return &bareMetalLister{indexer: indexer}
}

// List lists all BareMetals in the indexer.
func (s *bareMetalLister) List(selector labels.Selector) (ret []*v1alpha1.BareMetal, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BareMetal))
	})
	return ret, err
}

// BareMetals returns an object that can list and get BareMetals.
func (s *bareMetalLister) BareMetals(namespace string) BareMetalNamespaceLister {
	return bareMetalNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// BareMetalNamespaceLister helps list and get BareMetals.
// All objects returned here must be treated as read-only.
type BareMetalNamespaceLister interface {
	// List lists all BareMetals in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.BareMetal, err error)
	// Get retrieves the BareMetal from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.BareMetal, error)
	BareMetalNamespaceListerExpansion
}

// bareMetalNamespaceLister implements the BareMetalNamespaceLister
// interface.
type bareMetalNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all BareMetals in the indexer for a given namespace.
func (s bareMetalNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.BareMetal, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BareMetal))
	})
	return ret, err
}

// Get retrieves the BareMetal from the indexer for a given namespace and name.
func (s bareMetalNamespaceLister) Get(name string) (*v1alpha1.BareMetal, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("baremetal"), name)
	}
	return obj.(*v1alpha1.BareMetal), nil
}
