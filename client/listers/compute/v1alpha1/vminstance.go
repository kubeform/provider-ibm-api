/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-ibm-api/apis/compute/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VmInstanceLister helps list VmInstances.
// All objects returned here must be treated as read-only.
type VmInstanceLister interface {
	// List lists all VmInstances in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VmInstance, err error)
	// VmInstances returns an object that can list and get VmInstances.
	VmInstances(namespace string) VmInstanceNamespaceLister
	VmInstanceListerExpansion
}

// vmInstanceLister implements the VmInstanceLister interface.
type vmInstanceLister struct {
	indexer cache.Indexer
}

// NewVmInstanceLister returns a new VmInstanceLister.
func NewVmInstanceLister(indexer cache.Indexer) VmInstanceLister {
	return &vmInstanceLister{indexer: indexer}
}

// List lists all VmInstances in the indexer.
func (s *vmInstanceLister) List(selector labels.Selector) (ret []*v1alpha1.VmInstance, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VmInstance))
	})
	return ret, err
}

// VmInstances returns an object that can list and get VmInstances.
func (s *vmInstanceLister) VmInstances(namespace string) VmInstanceNamespaceLister {
	return vmInstanceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VmInstanceNamespaceLister helps list and get VmInstances.
// All objects returned here must be treated as read-only.
type VmInstanceNamespaceLister interface {
	// List lists all VmInstances in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VmInstance, err error)
	// Get retrieves the VmInstance from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.VmInstance, error)
	VmInstanceNamespaceListerExpansion
}

// vmInstanceNamespaceLister implements the VmInstanceNamespaceLister
// interface.
type vmInstanceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all VmInstances in the indexer for a given namespace.
func (s vmInstanceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.VmInstance, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VmInstance))
	})
	return ret, err
}

// Get retrieves the VmInstance from the indexer for a given namespace and name.
func (s vmInstanceNamespaceLister) Get(name string) (*v1alpha1.VmInstance, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("vminstance"), name)
	}
	return obj.(*v1alpha1.VmInstance), nil
}
