/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-ibm-api/apis/is/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// LbListenerLister helps list LbListeners.
// All objects returned here must be treated as read-only.
type LbListenerLister interface {
	// List lists all LbListeners in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.LbListener, err error)
	// LbListeners returns an object that can list and get LbListeners.
	LbListeners(namespace string) LbListenerNamespaceLister
	LbListenerListerExpansion
}

// lbListenerLister implements the LbListenerLister interface.
type lbListenerLister struct {
	indexer cache.Indexer
}

// NewLbListenerLister returns a new LbListenerLister.
func NewLbListenerLister(indexer cache.Indexer) LbListenerLister {
	return &lbListenerLister{indexer: indexer}
}

// List lists all LbListeners in the indexer.
func (s *lbListenerLister) List(selector labels.Selector) (ret []*v1alpha1.LbListener, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LbListener))
	})
	return ret, err
}

// LbListeners returns an object that can list and get LbListeners.
func (s *lbListenerLister) LbListeners(namespace string) LbListenerNamespaceLister {
	return lbListenerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// LbListenerNamespaceLister helps list and get LbListeners.
// All objects returned here must be treated as read-only.
type LbListenerNamespaceLister interface {
	// List lists all LbListeners in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.LbListener, err error)
	// Get retrieves the LbListener from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.LbListener, error)
	LbListenerNamespaceListerExpansion
}

// lbListenerNamespaceLister implements the LbListenerNamespaceLister
// interface.
type lbListenerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all LbListeners in the indexer for a given namespace.
func (s lbListenerNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.LbListener, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LbListener))
	})
	return ret, err
}

// Get retrieves the LbListener from the indexer for a given namespace and name.
func (s lbListenerNamespaceLister) Get(name string) (*v1alpha1.LbListener, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("lblistener"), name)
	}
	return obj.(*v1alpha1.LbListener), nil
}
