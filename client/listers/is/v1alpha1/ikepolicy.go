/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-ibm-api/apis/is/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// IkePolicyLister helps list IkePolicies.
// All objects returned here must be treated as read-only.
type IkePolicyLister interface {
	// List lists all IkePolicies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.IkePolicy, err error)
	// IkePolicies returns an object that can list and get IkePolicies.
	IkePolicies(namespace string) IkePolicyNamespaceLister
	IkePolicyListerExpansion
}

// ikePolicyLister implements the IkePolicyLister interface.
type ikePolicyLister struct {
	indexer cache.Indexer
}

// NewIkePolicyLister returns a new IkePolicyLister.
func NewIkePolicyLister(indexer cache.Indexer) IkePolicyLister {
	return &ikePolicyLister{indexer: indexer}
}

// List lists all IkePolicies in the indexer.
func (s *ikePolicyLister) List(selector labels.Selector) (ret []*v1alpha1.IkePolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IkePolicy))
	})
	return ret, err
}

// IkePolicies returns an object that can list and get IkePolicies.
func (s *ikePolicyLister) IkePolicies(namespace string) IkePolicyNamespaceLister {
	return ikePolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// IkePolicyNamespaceLister helps list and get IkePolicies.
// All objects returned here must be treated as read-only.
type IkePolicyNamespaceLister interface {
	// List lists all IkePolicies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.IkePolicy, err error)
	// Get retrieves the IkePolicy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.IkePolicy, error)
	IkePolicyNamespaceListerExpansion
}

// ikePolicyNamespaceLister implements the IkePolicyNamespaceLister
// interface.
type ikePolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all IkePolicies in the indexer for a given namespace.
func (s ikePolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.IkePolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IkePolicy))
	})
	return ret, err
}

// Get retrieves the IkePolicy from the indexer for a given namespace and name.
func (s ikePolicyNamespaceLister) Get(name string) (*v1alpha1.IkePolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("ikepolicy"), name)
	}
	return obj.(*v1alpha1.IkePolicy), nil
}
