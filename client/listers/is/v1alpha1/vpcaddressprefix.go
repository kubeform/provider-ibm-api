/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-ibm-api/apis/is/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VpcAddressPrefixLister helps list VpcAddressPrefixes.
// All objects returned here must be treated as read-only.
type VpcAddressPrefixLister interface {
	// List lists all VpcAddressPrefixes in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VpcAddressPrefix, err error)
	// VpcAddressPrefixes returns an object that can list and get VpcAddressPrefixes.
	VpcAddressPrefixes(namespace string) VpcAddressPrefixNamespaceLister
	VpcAddressPrefixListerExpansion
}

// vpcAddressPrefixLister implements the VpcAddressPrefixLister interface.
type vpcAddressPrefixLister struct {
	indexer cache.Indexer
}

// NewVpcAddressPrefixLister returns a new VpcAddressPrefixLister.
func NewVpcAddressPrefixLister(indexer cache.Indexer) VpcAddressPrefixLister {
	return &vpcAddressPrefixLister{indexer: indexer}
}

// List lists all VpcAddressPrefixes in the indexer.
func (s *vpcAddressPrefixLister) List(selector labels.Selector) (ret []*v1alpha1.VpcAddressPrefix, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VpcAddressPrefix))
	})
	return ret, err
}

// VpcAddressPrefixes returns an object that can list and get VpcAddressPrefixes.
func (s *vpcAddressPrefixLister) VpcAddressPrefixes(namespace string) VpcAddressPrefixNamespaceLister {
	return vpcAddressPrefixNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VpcAddressPrefixNamespaceLister helps list and get VpcAddressPrefixes.
// All objects returned here must be treated as read-only.
type VpcAddressPrefixNamespaceLister interface {
	// List lists all VpcAddressPrefixes in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VpcAddressPrefix, err error)
	// Get retrieves the VpcAddressPrefix from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.VpcAddressPrefix, error)
	VpcAddressPrefixNamespaceListerExpansion
}

// vpcAddressPrefixNamespaceLister implements the VpcAddressPrefixNamespaceLister
// interface.
type vpcAddressPrefixNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all VpcAddressPrefixes in the indexer for a given namespace.
func (s vpcAddressPrefixNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.VpcAddressPrefix, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VpcAddressPrefix))
	})
	return ret, err
}

// Get retrieves the VpcAddressPrefix from the indexer for a given namespace and name.
func (s vpcAddressPrefixNamespaceLister) Get(name string) (*v1alpha1.VpcAddressPrefix, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("vpcaddressprefix"), name)
	}
	return obj.(*v1alpha1.VpcAddressPrefix), nil
}
