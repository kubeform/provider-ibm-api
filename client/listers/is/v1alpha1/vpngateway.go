/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-ibm-api/apis/is/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VpnGatewayLister helps list VpnGateways.
// All objects returned here must be treated as read-only.
type VpnGatewayLister interface {
	// List lists all VpnGateways in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VpnGateway, err error)
	// VpnGateways returns an object that can list and get VpnGateways.
	VpnGateways(namespace string) VpnGatewayNamespaceLister
	VpnGatewayListerExpansion
}

// vpnGatewayLister implements the VpnGatewayLister interface.
type vpnGatewayLister struct {
	indexer cache.Indexer
}

// NewVpnGatewayLister returns a new VpnGatewayLister.
func NewVpnGatewayLister(indexer cache.Indexer) VpnGatewayLister {
	return &vpnGatewayLister{indexer: indexer}
}

// List lists all VpnGateways in the indexer.
func (s *vpnGatewayLister) List(selector labels.Selector) (ret []*v1alpha1.VpnGateway, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VpnGateway))
	})
	return ret, err
}

// VpnGateways returns an object that can list and get VpnGateways.
func (s *vpnGatewayLister) VpnGateways(namespace string) VpnGatewayNamespaceLister {
	return vpnGatewayNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VpnGatewayNamespaceLister helps list and get VpnGateways.
// All objects returned here must be treated as read-only.
type VpnGatewayNamespaceLister interface {
	// List lists all VpnGateways in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VpnGateway, err error)
	// Get retrieves the VpnGateway from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.VpnGateway, error)
	VpnGatewayNamespaceListerExpansion
}

// vpnGatewayNamespaceLister implements the VpnGatewayNamespaceLister
// interface.
type vpnGatewayNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all VpnGateways in the indexer for a given namespace.
func (s vpnGatewayNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.VpnGateway, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VpnGateway))
	})
	return ret, err
}

// Get retrieves the VpnGateway from the indexer for a given namespace and name.
func (s vpnGatewayNamespaceLister) Get(name string) (*v1alpha1.VpnGateway, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("vpngateway"), name)
	}
	return obj.(*v1alpha1.VpnGateway), nil
}
