/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-ibm-api/apis/is/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// InstanceGroupManagerActionLister helps list InstanceGroupManagerActions.
// All objects returned here must be treated as read-only.
type InstanceGroupManagerActionLister interface {
	// List lists all InstanceGroupManagerActions in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.InstanceGroupManagerAction, err error)
	// InstanceGroupManagerActions returns an object that can list and get InstanceGroupManagerActions.
	InstanceGroupManagerActions(namespace string) InstanceGroupManagerActionNamespaceLister
	InstanceGroupManagerActionListerExpansion
}

// instanceGroupManagerActionLister implements the InstanceGroupManagerActionLister interface.
type instanceGroupManagerActionLister struct {
	indexer cache.Indexer
}

// NewInstanceGroupManagerActionLister returns a new InstanceGroupManagerActionLister.
func NewInstanceGroupManagerActionLister(indexer cache.Indexer) InstanceGroupManagerActionLister {
	return &instanceGroupManagerActionLister{indexer: indexer}
}

// List lists all InstanceGroupManagerActions in the indexer.
func (s *instanceGroupManagerActionLister) List(selector labels.Selector) (ret []*v1alpha1.InstanceGroupManagerAction, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.InstanceGroupManagerAction))
	})
	return ret, err
}

// InstanceGroupManagerActions returns an object that can list and get InstanceGroupManagerActions.
func (s *instanceGroupManagerActionLister) InstanceGroupManagerActions(namespace string) InstanceGroupManagerActionNamespaceLister {
	return instanceGroupManagerActionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// InstanceGroupManagerActionNamespaceLister helps list and get InstanceGroupManagerActions.
// All objects returned here must be treated as read-only.
type InstanceGroupManagerActionNamespaceLister interface {
	// List lists all InstanceGroupManagerActions in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.InstanceGroupManagerAction, err error)
	// Get retrieves the InstanceGroupManagerAction from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.InstanceGroupManagerAction, error)
	InstanceGroupManagerActionNamespaceListerExpansion
}

// instanceGroupManagerActionNamespaceLister implements the InstanceGroupManagerActionNamespaceLister
// interface.
type instanceGroupManagerActionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all InstanceGroupManagerActions in the indexer for a given namespace.
func (s instanceGroupManagerActionNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.InstanceGroupManagerAction, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.InstanceGroupManagerAction))
	})
	return ret, err
}

// Get retrieves the InstanceGroupManagerAction from the indexer for a given namespace and name.
func (s instanceGroupManagerActionNamespaceLister) Get(name string) (*v1alpha1.InstanceGroupManagerAction, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("instancegroupmanageraction"), name)
	}
	return obj.(*v1alpha1.InstanceGroupManagerAction), nil
}
