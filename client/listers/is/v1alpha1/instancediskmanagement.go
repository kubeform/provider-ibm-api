/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-ibm-api/apis/is/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// InstanceDiskManagementLister helps list InstanceDiskManagements.
// All objects returned here must be treated as read-only.
type InstanceDiskManagementLister interface {
	// List lists all InstanceDiskManagements in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.InstanceDiskManagement, err error)
	// InstanceDiskManagements returns an object that can list and get InstanceDiskManagements.
	InstanceDiskManagements(namespace string) InstanceDiskManagementNamespaceLister
	InstanceDiskManagementListerExpansion
}

// instanceDiskManagementLister implements the InstanceDiskManagementLister interface.
type instanceDiskManagementLister struct {
	indexer cache.Indexer
}

// NewInstanceDiskManagementLister returns a new InstanceDiskManagementLister.
func NewInstanceDiskManagementLister(indexer cache.Indexer) InstanceDiskManagementLister {
	return &instanceDiskManagementLister{indexer: indexer}
}

// List lists all InstanceDiskManagements in the indexer.
func (s *instanceDiskManagementLister) List(selector labels.Selector) (ret []*v1alpha1.InstanceDiskManagement, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.InstanceDiskManagement))
	})
	return ret, err
}

// InstanceDiskManagements returns an object that can list and get InstanceDiskManagements.
func (s *instanceDiskManagementLister) InstanceDiskManagements(namespace string) InstanceDiskManagementNamespaceLister {
	return instanceDiskManagementNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// InstanceDiskManagementNamespaceLister helps list and get InstanceDiskManagements.
// All objects returned here must be treated as read-only.
type InstanceDiskManagementNamespaceLister interface {
	// List lists all InstanceDiskManagements in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.InstanceDiskManagement, err error)
	// Get retrieves the InstanceDiskManagement from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.InstanceDiskManagement, error)
	InstanceDiskManagementNamespaceListerExpansion
}

// instanceDiskManagementNamespaceLister implements the InstanceDiskManagementNamespaceLister
// interface.
type instanceDiskManagementNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all InstanceDiskManagements in the indexer for a given namespace.
func (s instanceDiskManagementNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.InstanceDiskManagement, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.InstanceDiskManagement))
	})
	return ret, err
}

// Get retrieves the InstanceDiskManagement from the indexer for a given namespace and name.
func (s instanceDiskManagementNamespaceLister) Get(name string) (*v1alpha1.InstanceDiskManagement, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("instancediskmanagement"), name)
	}
	return obj.(*v1alpha1.InstanceDiskManagement), nil
}
