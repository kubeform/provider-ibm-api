/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-ibm-api/apis/is/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DedicatedHostGroupLister helps list DedicatedHostGroups.
// All objects returned here must be treated as read-only.
type DedicatedHostGroupLister interface {
	// List lists all DedicatedHostGroups in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DedicatedHostGroup, err error)
	// DedicatedHostGroups returns an object that can list and get DedicatedHostGroups.
	DedicatedHostGroups(namespace string) DedicatedHostGroupNamespaceLister
	DedicatedHostGroupListerExpansion
}

// dedicatedHostGroupLister implements the DedicatedHostGroupLister interface.
type dedicatedHostGroupLister struct {
	indexer cache.Indexer
}

// NewDedicatedHostGroupLister returns a new DedicatedHostGroupLister.
func NewDedicatedHostGroupLister(indexer cache.Indexer) DedicatedHostGroupLister {
	return &dedicatedHostGroupLister{indexer: indexer}
}

// List lists all DedicatedHostGroups in the indexer.
func (s *dedicatedHostGroupLister) List(selector labels.Selector) (ret []*v1alpha1.DedicatedHostGroup, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DedicatedHostGroup))
	})
	return ret, err
}

// DedicatedHostGroups returns an object that can list and get DedicatedHostGroups.
func (s *dedicatedHostGroupLister) DedicatedHostGroups(namespace string) DedicatedHostGroupNamespaceLister {
	return dedicatedHostGroupNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DedicatedHostGroupNamespaceLister helps list and get DedicatedHostGroups.
// All objects returned here must be treated as read-only.
type DedicatedHostGroupNamespaceLister interface {
	// List lists all DedicatedHostGroups in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DedicatedHostGroup, err error)
	// Get retrieves the DedicatedHostGroup from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.DedicatedHostGroup, error)
	DedicatedHostGroupNamespaceListerExpansion
}

// dedicatedHostGroupNamespaceLister implements the DedicatedHostGroupNamespaceLister
// interface.
type dedicatedHostGroupNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DedicatedHostGroups in the indexer for a given namespace.
func (s dedicatedHostGroupNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DedicatedHostGroup, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DedicatedHostGroup))
	})
	return ret, err
}

// Get retrieves the DedicatedHostGroup from the indexer for a given namespace and name.
func (s dedicatedHostGroupNamespaceLister) Get(name string) (*v1alpha1.DedicatedHostGroup, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("dedicatedhostgroup"), name)
	}
	return obj.(*v1alpha1.DedicatedHostGroup), nil
}
