/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-ibm-api/apis/is/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DedicatedHostLister helps list DedicatedHosts.
// All objects returned here must be treated as read-only.
type DedicatedHostLister interface {
	// List lists all DedicatedHosts in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DedicatedHost, err error)
	// DedicatedHosts returns an object that can list and get DedicatedHosts.
	DedicatedHosts(namespace string) DedicatedHostNamespaceLister
	DedicatedHostListerExpansion
}

// dedicatedHostLister implements the DedicatedHostLister interface.
type dedicatedHostLister struct {
	indexer cache.Indexer
}

// NewDedicatedHostLister returns a new DedicatedHostLister.
func NewDedicatedHostLister(indexer cache.Indexer) DedicatedHostLister {
	return &dedicatedHostLister{indexer: indexer}
}

// List lists all DedicatedHosts in the indexer.
func (s *dedicatedHostLister) List(selector labels.Selector) (ret []*v1alpha1.DedicatedHost, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DedicatedHost))
	})
	return ret, err
}

// DedicatedHosts returns an object that can list and get DedicatedHosts.
func (s *dedicatedHostLister) DedicatedHosts(namespace string) DedicatedHostNamespaceLister {
	return dedicatedHostNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DedicatedHostNamespaceLister helps list and get DedicatedHosts.
// All objects returned here must be treated as read-only.
type DedicatedHostNamespaceLister interface {
	// List lists all DedicatedHosts in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DedicatedHost, err error)
	// Get retrieves the DedicatedHost from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.DedicatedHost, error)
	DedicatedHostNamespaceListerExpansion
}

// dedicatedHostNamespaceLister implements the DedicatedHostNamespaceLister
// interface.
type dedicatedHostNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DedicatedHosts in the indexer for a given namespace.
func (s dedicatedHostNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DedicatedHost, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DedicatedHost))
	})
	return ret, err
}

// Get retrieves the DedicatedHost from the indexer for a given namespace and name.
func (s dedicatedHostNamespaceLister) Get(name string) (*v1alpha1.DedicatedHost, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("dedicatedhost"), name)
	}
	return obj.(*v1alpha1.DedicatedHost), nil
}
