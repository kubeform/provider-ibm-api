/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-ibm-api/apis/is/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// InstanceGroupMembershipLister helps list InstanceGroupMemberships.
// All objects returned here must be treated as read-only.
type InstanceGroupMembershipLister interface {
	// List lists all InstanceGroupMemberships in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.InstanceGroupMembership, err error)
	// InstanceGroupMemberships returns an object that can list and get InstanceGroupMemberships.
	InstanceGroupMemberships(namespace string) InstanceGroupMembershipNamespaceLister
	InstanceGroupMembershipListerExpansion
}

// instanceGroupMembershipLister implements the InstanceGroupMembershipLister interface.
type instanceGroupMembershipLister struct {
	indexer cache.Indexer
}

// NewInstanceGroupMembershipLister returns a new InstanceGroupMembershipLister.
func NewInstanceGroupMembershipLister(indexer cache.Indexer) InstanceGroupMembershipLister {
	return &instanceGroupMembershipLister{indexer: indexer}
}

// List lists all InstanceGroupMemberships in the indexer.
func (s *instanceGroupMembershipLister) List(selector labels.Selector) (ret []*v1alpha1.InstanceGroupMembership, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.InstanceGroupMembership))
	})
	return ret, err
}

// InstanceGroupMemberships returns an object that can list and get InstanceGroupMemberships.
func (s *instanceGroupMembershipLister) InstanceGroupMemberships(namespace string) InstanceGroupMembershipNamespaceLister {
	return instanceGroupMembershipNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// InstanceGroupMembershipNamespaceLister helps list and get InstanceGroupMemberships.
// All objects returned here must be treated as read-only.
type InstanceGroupMembershipNamespaceLister interface {
	// List lists all InstanceGroupMemberships in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.InstanceGroupMembership, err error)
	// Get retrieves the InstanceGroupMembership from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.InstanceGroupMembership, error)
	InstanceGroupMembershipNamespaceListerExpansion
}

// instanceGroupMembershipNamespaceLister implements the InstanceGroupMembershipNamespaceLister
// interface.
type instanceGroupMembershipNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all InstanceGroupMemberships in the indexer for a given namespace.
func (s instanceGroupMembershipNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.InstanceGroupMembership, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.InstanceGroupMembership))
	})
	return ret, err
}

// Get retrieves the InstanceGroupMembership from the indexer for a given namespace and name.
func (s instanceGroupMembershipNamespaceLister) Get(name string) (*v1alpha1.InstanceGroupMembership, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("instancegroupmembership"), name)
	}
	return obj.(*v1alpha1.InstanceGroupMembership), nil
}
