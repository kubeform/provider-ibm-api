/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-ibm-api/apis/is/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// NetworkACLLister helps list NetworkACLs.
// All objects returned here must be treated as read-only.
type NetworkACLLister interface {
	// List lists all NetworkACLs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.NetworkACL, err error)
	// NetworkACLs returns an object that can list and get NetworkACLs.
	NetworkACLs(namespace string) NetworkACLNamespaceLister
	NetworkACLListerExpansion
}

// networkACLLister implements the NetworkACLLister interface.
type networkACLLister struct {
	indexer cache.Indexer
}

// NewNetworkACLLister returns a new NetworkACLLister.
func NewNetworkACLLister(indexer cache.Indexer) NetworkACLLister {
	return &networkACLLister{indexer: indexer}
}

// List lists all NetworkACLs in the indexer.
func (s *networkACLLister) List(selector labels.Selector) (ret []*v1alpha1.NetworkACL, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NetworkACL))
	})
	return ret, err
}

// NetworkACLs returns an object that can list and get NetworkACLs.
func (s *networkACLLister) NetworkACLs(namespace string) NetworkACLNamespaceLister {
	return networkACLNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// NetworkACLNamespaceLister helps list and get NetworkACLs.
// All objects returned here must be treated as read-only.
type NetworkACLNamespaceLister interface {
	// List lists all NetworkACLs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.NetworkACL, err error)
	// Get retrieves the NetworkACL from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.NetworkACL, error)
	NetworkACLNamespaceListerExpansion
}

// networkACLNamespaceLister implements the NetworkACLNamespaceLister
// interface.
type networkACLNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all NetworkACLs in the indexer for a given namespace.
func (s networkACLNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.NetworkACL, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NetworkACL))
	})
	return ret, err
}

// Get retrieves the NetworkACL from the indexer for a given namespace and name.
func (s networkACLNamespaceLister) Get(name string) (*v1alpha1.NetworkACL, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("networkacl"), name)
	}
	return obj.(*v1alpha1.NetworkACL), nil
}
