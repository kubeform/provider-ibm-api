/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-ibm-api/apis/is/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// InstanceGroupManagerPolicyLister helps list InstanceGroupManagerPolicies.
// All objects returned here must be treated as read-only.
type InstanceGroupManagerPolicyLister interface {
	// List lists all InstanceGroupManagerPolicies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.InstanceGroupManagerPolicy, err error)
	// InstanceGroupManagerPolicies returns an object that can list and get InstanceGroupManagerPolicies.
	InstanceGroupManagerPolicies(namespace string) InstanceGroupManagerPolicyNamespaceLister
	InstanceGroupManagerPolicyListerExpansion
}

// instanceGroupManagerPolicyLister implements the InstanceGroupManagerPolicyLister interface.
type instanceGroupManagerPolicyLister struct {
	indexer cache.Indexer
}

// NewInstanceGroupManagerPolicyLister returns a new InstanceGroupManagerPolicyLister.
func NewInstanceGroupManagerPolicyLister(indexer cache.Indexer) InstanceGroupManagerPolicyLister {
	return &instanceGroupManagerPolicyLister{indexer: indexer}
}

// List lists all InstanceGroupManagerPolicies in the indexer.
func (s *instanceGroupManagerPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.InstanceGroupManagerPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.InstanceGroupManagerPolicy))
	})
	return ret, err
}

// InstanceGroupManagerPolicies returns an object that can list and get InstanceGroupManagerPolicies.
func (s *instanceGroupManagerPolicyLister) InstanceGroupManagerPolicies(namespace string) InstanceGroupManagerPolicyNamespaceLister {
	return instanceGroupManagerPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// InstanceGroupManagerPolicyNamespaceLister helps list and get InstanceGroupManagerPolicies.
// All objects returned here must be treated as read-only.
type InstanceGroupManagerPolicyNamespaceLister interface {
	// List lists all InstanceGroupManagerPolicies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.InstanceGroupManagerPolicy, err error)
	// Get retrieves the InstanceGroupManagerPolicy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.InstanceGroupManagerPolicy, error)
	InstanceGroupManagerPolicyNamespaceListerExpansion
}

// instanceGroupManagerPolicyNamespaceLister implements the InstanceGroupManagerPolicyNamespaceLister
// interface.
type instanceGroupManagerPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all InstanceGroupManagerPolicies in the indexer for a given namespace.
func (s instanceGroupManagerPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.InstanceGroupManagerPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.InstanceGroupManagerPolicy))
	})
	return ret, err
}

// Get retrieves the InstanceGroupManagerPolicy from the indexer for a given namespace and name.
func (s instanceGroupManagerPolicyNamespaceLister) Get(name string) (*v1alpha1.InstanceGroupManagerPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("instancegroupmanagerpolicy"), name)
	}
	return obj.(*v1alpha1.InstanceGroupManagerPolicy), nil
}
