/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-ibm-api/apis/is/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DedicatedHostDiskManagementLister helps list DedicatedHostDiskManagements.
// All objects returned here must be treated as read-only.
type DedicatedHostDiskManagementLister interface {
	// List lists all DedicatedHostDiskManagements in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DedicatedHostDiskManagement, err error)
	// DedicatedHostDiskManagements returns an object that can list and get DedicatedHostDiskManagements.
	DedicatedHostDiskManagements(namespace string) DedicatedHostDiskManagementNamespaceLister
	DedicatedHostDiskManagementListerExpansion
}

// dedicatedHostDiskManagementLister implements the DedicatedHostDiskManagementLister interface.
type dedicatedHostDiskManagementLister struct {
	indexer cache.Indexer
}

// NewDedicatedHostDiskManagementLister returns a new DedicatedHostDiskManagementLister.
func NewDedicatedHostDiskManagementLister(indexer cache.Indexer) DedicatedHostDiskManagementLister {
	return &dedicatedHostDiskManagementLister{indexer: indexer}
}

// List lists all DedicatedHostDiskManagements in the indexer.
func (s *dedicatedHostDiskManagementLister) List(selector labels.Selector) (ret []*v1alpha1.DedicatedHostDiskManagement, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DedicatedHostDiskManagement))
	})
	return ret, err
}

// DedicatedHostDiskManagements returns an object that can list and get DedicatedHostDiskManagements.
func (s *dedicatedHostDiskManagementLister) DedicatedHostDiskManagements(namespace string) DedicatedHostDiskManagementNamespaceLister {
	return dedicatedHostDiskManagementNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DedicatedHostDiskManagementNamespaceLister helps list and get DedicatedHostDiskManagements.
// All objects returned here must be treated as read-only.
type DedicatedHostDiskManagementNamespaceLister interface {
	// List lists all DedicatedHostDiskManagements in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DedicatedHostDiskManagement, err error)
	// Get retrieves the DedicatedHostDiskManagement from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.DedicatedHostDiskManagement, error)
	DedicatedHostDiskManagementNamespaceListerExpansion
}

// dedicatedHostDiskManagementNamespaceLister implements the DedicatedHostDiskManagementNamespaceLister
// interface.
type dedicatedHostDiskManagementNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DedicatedHostDiskManagements in the indexer for a given namespace.
func (s dedicatedHostDiskManagementNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DedicatedHostDiskManagement, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DedicatedHostDiskManagement))
	})
	return ret, err
}

// Get retrieves the DedicatedHostDiskManagement from the indexer for a given namespace and name.
func (s dedicatedHostDiskManagementNamespaceLister) Get(name string) (*v1alpha1.DedicatedHostDiskManagement, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("dedicatedhostdiskmanagement"), name)
	}
	return obj.(*v1alpha1.DedicatedHostDiskManagement), nil
}
