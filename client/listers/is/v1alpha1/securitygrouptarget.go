/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-ibm-api/apis/is/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SecurityGroupTargetLister helps list SecurityGroupTargets.
// All objects returned here must be treated as read-only.
type SecurityGroupTargetLister interface {
	// List lists all SecurityGroupTargets in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SecurityGroupTarget, err error)
	// SecurityGroupTargets returns an object that can list and get SecurityGroupTargets.
	SecurityGroupTargets(namespace string) SecurityGroupTargetNamespaceLister
	SecurityGroupTargetListerExpansion
}

// securityGroupTargetLister implements the SecurityGroupTargetLister interface.
type securityGroupTargetLister struct {
	indexer cache.Indexer
}

// NewSecurityGroupTargetLister returns a new SecurityGroupTargetLister.
func NewSecurityGroupTargetLister(indexer cache.Indexer) SecurityGroupTargetLister {
	return &securityGroupTargetLister{indexer: indexer}
}

// List lists all SecurityGroupTargets in the indexer.
func (s *securityGroupTargetLister) List(selector labels.Selector) (ret []*v1alpha1.SecurityGroupTarget, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SecurityGroupTarget))
	})
	return ret, err
}

// SecurityGroupTargets returns an object that can list and get SecurityGroupTargets.
func (s *securityGroupTargetLister) SecurityGroupTargets(namespace string) SecurityGroupTargetNamespaceLister {
	return securityGroupTargetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SecurityGroupTargetNamespaceLister helps list and get SecurityGroupTargets.
// All objects returned here must be treated as read-only.
type SecurityGroupTargetNamespaceLister interface {
	// List lists all SecurityGroupTargets in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SecurityGroupTarget, err error)
	// Get retrieves the SecurityGroupTarget from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.SecurityGroupTarget, error)
	SecurityGroupTargetNamespaceListerExpansion
}

// securityGroupTargetNamespaceLister implements the SecurityGroupTargetNamespaceLister
// interface.
type securityGroupTargetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SecurityGroupTargets in the indexer for a given namespace.
func (s securityGroupTargetNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SecurityGroupTarget, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SecurityGroupTarget))
	})
	return ret, err
}

// Get retrieves the SecurityGroupTarget from the indexer for a given namespace and name.
func (s securityGroupTargetNamespaceLister) Get(name string) (*v1alpha1.SecurityGroupTarget, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("securitygrouptarget"), name)
	}
	return obj.(*v1alpha1.SecurityGroupTarget), nil
}
