/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-ibm-api/apis/is/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VpcRoutingTableLister helps list VpcRoutingTables.
// All objects returned here must be treated as read-only.
type VpcRoutingTableLister interface {
	// List lists all VpcRoutingTables in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VpcRoutingTable, err error)
	// VpcRoutingTables returns an object that can list and get VpcRoutingTables.
	VpcRoutingTables(namespace string) VpcRoutingTableNamespaceLister
	VpcRoutingTableListerExpansion
}

// vpcRoutingTableLister implements the VpcRoutingTableLister interface.
type vpcRoutingTableLister struct {
	indexer cache.Indexer
}

// NewVpcRoutingTableLister returns a new VpcRoutingTableLister.
func NewVpcRoutingTableLister(indexer cache.Indexer) VpcRoutingTableLister {
	return &vpcRoutingTableLister{indexer: indexer}
}

// List lists all VpcRoutingTables in the indexer.
func (s *vpcRoutingTableLister) List(selector labels.Selector) (ret []*v1alpha1.VpcRoutingTable, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VpcRoutingTable))
	})
	return ret, err
}

// VpcRoutingTables returns an object that can list and get VpcRoutingTables.
func (s *vpcRoutingTableLister) VpcRoutingTables(namespace string) VpcRoutingTableNamespaceLister {
	return vpcRoutingTableNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VpcRoutingTableNamespaceLister helps list and get VpcRoutingTables.
// All objects returned here must be treated as read-only.
type VpcRoutingTableNamespaceLister interface {
	// List lists all VpcRoutingTables in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VpcRoutingTable, err error)
	// Get retrieves the VpcRoutingTable from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.VpcRoutingTable, error)
	VpcRoutingTableNamespaceListerExpansion
}

// vpcRoutingTableNamespaceLister implements the VpcRoutingTableNamespaceLister
// interface.
type vpcRoutingTableNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all VpcRoutingTables in the indexer for a given namespace.
func (s vpcRoutingTableNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.VpcRoutingTable, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VpcRoutingTable))
	})
	return ret, err
}

// Get retrieves the VpcRoutingTable from the indexer for a given namespace and name.
func (s vpcRoutingTableNamespaceLister) Get(name string) (*v1alpha1.VpcRoutingTable, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("vpcroutingtable"), name)
	}
	return obj.(*v1alpha1.VpcRoutingTable), nil
}
