/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-ibm-api/apis/is/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VpcRouteLister helps list VpcRoutes.
// All objects returned here must be treated as read-only.
type VpcRouteLister interface {
	// List lists all VpcRoutes in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VpcRoute, err error)
	// VpcRoutes returns an object that can list and get VpcRoutes.
	VpcRoutes(namespace string) VpcRouteNamespaceLister
	VpcRouteListerExpansion
}

// vpcRouteLister implements the VpcRouteLister interface.
type vpcRouteLister struct {
	indexer cache.Indexer
}

// NewVpcRouteLister returns a new VpcRouteLister.
func NewVpcRouteLister(indexer cache.Indexer) VpcRouteLister {
	return &vpcRouteLister{indexer: indexer}
}

// List lists all VpcRoutes in the indexer.
func (s *vpcRouteLister) List(selector labels.Selector) (ret []*v1alpha1.VpcRoute, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VpcRoute))
	})
	return ret, err
}

// VpcRoutes returns an object that can list and get VpcRoutes.
func (s *vpcRouteLister) VpcRoutes(namespace string) VpcRouteNamespaceLister {
	return vpcRouteNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VpcRouteNamespaceLister helps list and get VpcRoutes.
// All objects returned here must be treated as read-only.
type VpcRouteNamespaceLister interface {
	// List lists all VpcRoutes in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VpcRoute, err error)
	// Get retrieves the VpcRoute from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.VpcRoute, error)
	VpcRouteNamespaceListerExpansion
}

// vpcRouteNamespaceLister implements the VpcRouteNamespaceLister
// interface.
type vpcRouteNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all VpcRoutes in the indexer for a given namespace.
func (s vpcRouteNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.VpcRoute, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VpcRoute))
	})
	return ret, err
}

// Get retrieves the VpcRoute from the indexer for a given namespace and name.
func (s vpcRouteNamespaceLister) Get(name string) (*v1alpha1.VpcRoute, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("vpcroute"), name)
	}
	return obj.(*v1alpha1.VpcRoute), nil
}
