/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-ibm-api/apis/is/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// LbPoolLister helps list LbPools.
// All objects returned here must be treated as read-only.
type LbPoolLister interface {
	// List lists all LbPools in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.LbPool, err error)
	// LbPools returns an object that can list and get LbPools.
	LbPools(namespace string) LbPoolNamespaceLister
	LbPoolListerExpansion
}

// lbPoolLister implements the LbPoolLister interface.
type lbPoolLister struct {
	indexer cache.Indexer
}

// NewLbPoolLister returns a new LbPoolLister.
func NewLbPoolLister(indexer cache.Indexer) LbPoolLister {
	return &lbPoolLister{indexer: indexer}
}

// List lists all LbPools in the indexer.
func (s *lbPoolLister) List(selector labels.Selector) (ret []*v1alpha1.LbPool, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LbPool))
	})
	return ret, err
}

// LbPools returns an object that can list and get LbPools.
func (s *lbPoolLister) LbPools(namespace string) LbPoolNamespaceLister {
	return lbPoolNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// LbPoolNamespaceLister helps list and get LbPools.
// All objects returned here must be treated as read-only.
type LbPoolNamespaceLister interface {
	// List lists all LbPools in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.LbPool, err error)
	// Get retrieves the LbPool from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.LbPool, error)
	LbPoolNamespaceListerExpansion
}

// lbPoolNamespaceLister implements the LbPoolNamespaceLister
// interface.
type lbPoolNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all LbPools in the indexer for a given namespace.
func (s lbPoolNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.LbPool, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LbPool))
	})
	return ret, err
}

// Get retrieves the LbPool from the indexer for a given namespace and name.
func (s lbPoolNamespaceLister) Get(name string) (*v1alpha1.LbPool, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("lbpool"), name)
	}
	return obj.(*v1alpha1.LbPool), nil
}
