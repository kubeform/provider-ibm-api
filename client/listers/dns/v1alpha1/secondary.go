/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-ibm-api/apis/dns/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SecondaryLister helps list Secondaries.
// All objects returned here must be treated as read-only.
type SecondaryLister interface {
	// List lists all Secondaries in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Secondary, err error)
	// Secondaries returns an object that can list and get Secondaries.
	Secondaries(namespace string) SecondaryNamespaceLister
	SecondaryListerExpansion
}

// secondaryLister implements the SecondaryLister interface.
type secondaryLister struct {
	indexer cache.Indexer
}

// NewSecondaryLister returns a new SecondaryLister.
func NewSecondaryLister(indexer cache.Indexer) SecondaryLister {
	return &secondaryLister{indexer: indexer}
}

// List lists all Secondaries in the indexer.
func (s *secondaryLister) List(selector labels.Selector) (ret []*v1alpha1.Secondary, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Secondary))
	})
	return ret, err
}

// Secondaries returns an object that can list and get Secondaries.
func (s *secondaryLister) Secondaries(namespace string) SecondaryNamespaceLister {
	return secondaryNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SecondaryNamespaceLister helps list and get Secondaries.
// All objects returned here must be treated as read-only.
type SecondaryNamespaceLister interface {
	// List lists all Secondaries in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Secondary, err error)
	// Get retrieves the Secondary from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Secondary, error)
	SecondaryNamespaceListerExpansion
}

// secondaryNamespaceLister implements the SecondaryNamespaceLister
// interface.
type secondaryNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Secondaries in the indexer for a given namespace.
func (s secondaryNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Secondary, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Secondary))
	})
	return ret, err
}

// Get retrieves the Secondary from the indexer for a given namespace and name.
func (s secondaryNamespaceLister) Get(name string) (*v1alpha1.Secondary, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("secondary"), name)
	}
	return obj.(*v1alpha1.Secondary), nil
}
