/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-ibm-api/apis/dns/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PermittedNetworkLister helps list PermittedNetworks.
// All objects returned here must be treated as read-only.
type PermittedNetworkLister interface {
	// List lists all PermittedNetworks in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PermittedNetwork, err error)
	// PermittedNetworks returns an object that can list and get PermittedNetworks.
	PermittedNetworks(namespace string) PermittedNetworkNamespaceLister
	PermittedNetworkListerExpansion
}

// permittedNetworkLister implements the PermittedNetworkLister interface.
type permittedNetworkLister struct {
	indexer cache.Indexer
}

// NewPermittedNetworkLister returns a new PermittedNetworkLister.
func NewPermittedNetworkLister(indexer cache.Indexer) PermittedNetworkLister {
	return &permittedNetworkLister{indexer: indexer}
}

// List lists all PermittedNetworks in the indexer.
func (s *permittedNetworkLister) List(selector labels.Selector) (ret []*v1alpha1.PermittedNetwork, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PermittedNetwork))
	})
	return ret, err
}

// PermittedNetworks returns an object that can list and get PermittedNetworks.
func (s *permittedNetworkLister) PermittedNetworks(namespace string) PermittedNetworkNamespaceLister {
	return permittedNetworkNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PermittedNetworkNamespaceLister helps list and get PermittedNetworks.
// All objects returned here must be treated as read-only.
type PermittedNetworkNamespaceLister interface {
	// List lists all PermittedNetworks in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PermittedNetwork, err error)
	// Get retrieves the PermittedNetwork from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.PermittedNetwork, error)
	PermittedNetworkNamespaceListerExpansion
}

// permittedNetworkNamespaceLister implements the PermittedNetworkNamespaceLister
// interface.
type permittedNetworkNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PermittedNetworks in the indexer for a given namespace.
func (s permittedNetworkNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.PermittedNetwork, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PermittedNetwork))
	})
	return ret, err
}

// Get retrieves the PermittedNetwork from the indexer for a given namespace and name.
func (s permittedNetworkNamespaceLister) Get(name string) (*v1alpha1.PermittedNetwork, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("permittednetwork"), name)
	}
	return obj.(*v1alpha1.PermittedNetwork), nil
}
