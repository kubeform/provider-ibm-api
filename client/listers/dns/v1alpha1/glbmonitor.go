/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-ibm-api/apis/dns/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// GlbMonitorLister helps list GlbMonitors.
// All objects returned here must be treated as read-only.
type GlbMonitorLister interface {
	// List lists all GlbMonitors in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.GlbMonitor, err error)
	// GlbMonitors returns an object that can list and get GlbMonitors.
	GlbMonitors(namespace string) GlbMonitorNamespaceLister
	GlbMonitorListerExpansion
}

// glbMonitorLister implements the GlbMonitorLister interface.
type glbMonitorLister struct {
	indexer cache.Indexer
}

// NewGlbMonitorLister returns a new GlbMonitorLister.
func NewGlbMonitorLister(indexer cache.Indexer) GlbMonitorLister {
	return &glbMonitorLister{indexer: indexer}
}

// List lists all GlbMonitors in the indexer.
func (s *glbMonitorLister) List(selector labels.Selector) (ret []*v1alpha1.GlbMonitor, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GlbMonitor))
	})
	return ret, err
}

// GlbMonitors returns an object that can list and get GlbMonitors.
func (s *glbMonitorLister) GlbMonitors(namespace string) GlbMonitorNamespaceLister {
	return glbMonitorNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// GlbMonitorNamespaceLister helps list and get GlbMonitors.
// All objects returned here must be treated as read-only.
type GlbMonitorNamespaceLister interface {
	// List lists all GlbMonitors in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.GlbMonitor, err error)
	// Get retrieves the GlbMonitor from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.GlbMonitor, error)
	GlbMonitorNamespaceListerExpansion
}

// glbMonitorNamespaceLister implements the GlbMonitorNamespaceLister
// interface.
type glbMonitorNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all GlbMonitors in the indexer for a given namespace.
func (s glbMonitorNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.GlbMonitor, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GlbMonitor))
	})
	return ret, err
}

// Get retrieves the GlbMonitor from the indexer for a given namespace and name.
func (s glbMonitorNamespaceLister) Get(name string) (*v1alpha1.GlbMonitor, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("glbmonitor"), name)
	}
	return obj.(*v1alpha1.GlbMonitor), nil
}
