/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-ibm-api/apis/multi/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VlanFirewallLister helps list VlanFirewalls.
// All objects returned here must be treated as read-only.
type VlanFirewallLister interface {
	// List lists all VlanFirewalls in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VlanFirewall, err error)
	// VlanFirewalls returns an object that can list and get VlanFirewalls.
	VlanFirewalls(namespace string) VlanFirewallNamespaceLister
	VlanFirewallListerExpansion
}

// vlanFirewallLister implements the VlanFirewallLister interface.
type vlanFirewallLister struct {
	indexer cache.Indexer
}

// NewVlanFirewallLister returns a new VlanFirewallLister.
func NewVlanFirewallLister(indexer cache.Indexer) VlanFirewallLister {
	return &vlanFirewallLister{indexer: indexer}
}

// List lists all VlanFirewalls in the indexer.
func (s *vlanFirewallLister) List(selector labels.Selector) (ret []*v1alpha1.VlanFirewall, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VlanFirewall))
	})
	return ret, err
}

// VlanFirewalls returns an object that can list and get VlanFirewalls.
func (s *vlanFirewallLister) VlanFirewalls(namespace string) VlanFirewallNamespaceLister {
	return vlanFirewallNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VlanFirewallNamespaceLister helps list and get VlanFirewalls.
// All objects returned here must be treated as read-only.
type VlanFirewallNamespaceLister interface {
	// List lists all VlanFirewalls in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VlanFirewall, err error)
	// Get retrieves the VlanFirewall from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.VlanFirewall, error)
	VlanFirewallNamespaceListerExpansion
}

// vlanFirewallNamespaceLister implements the VlanFirewallNamespaceLister
// interface.
type vlanFirewallNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all VlanFirewalls in the indexer for a given namespace.
func (s vlanFirewallNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.VlanFirewall, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VlanFirewall))
	})
	return ret, err
}

// Get retrieves the VlanFirewall from the indexer for a given namespace and name.
func (s vlanFirewallNamespaceLister) Get(name string) (*v1alpha1.VlanFirewall, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("vlanfirewall"), name)
	}
	return obj.(*v1alpha1.VlanFirewall), nil
}
