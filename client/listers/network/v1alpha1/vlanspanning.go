/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-ibm-api/apis/network/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VlanSpanningLister helps list VlanSpannings.
// All objects returned here must be treated as read-only.
type VlanSpanningLister interface {
	// List lists all VlanSpannings in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VlanSpanning, err error)
	// VlanSpannings returns an object that can list and get VlanSpannings.
	VlanSpannings(namespace string) VlanSpanningNamespaceLister
	VlanSpanningListerExpansion
}

// vlanSpanningLister implements the VlanSpanningLister interface.
type vlanSpanningLister struct {
	indexer cache.Indexer
}

// NewVlanSpanningLister returns a new VlanSpanningLister.
func NewVlanSpanningLister(indexer cache.Indexer) VlanSpanningLister {
	return &vlanSpanningLister{indexer: indexer}
}

// List lists all VlanSpannings in the indexer.
func (s *vlanSpanningLister) List(selector labels.Selector) (ret []*v1alpha1.VlanSpanning, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VlanSpanning))
	})
	return ret, err
}

// VlanSpannings returns an object that can list and get VlanSpannings.
func (s *vlanSpanningLister) VlanSpannings(namespace string) VlanSpanningNamespaceLister {
	return vlanSpanningNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VlanSpanningNamespaceLister helps list and get VlanSpannings.
// All objects returned here must be treated as read-only.
type VlanSpanningNamespaceLister interface {
	// List lists all VlanSpannings in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VlanSpanning, err error)
	// Get retrieves the VlanSpanning from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.VlanSpanning, error)
	VlanSpanningNamespaceListerExpansion
}

// vlanSpanningNamespaceLister implements the VlanSpanningNamespaceLister
// interface.
type vlanSpanningNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all VlanSpannings in the indexer for a given namespace.
func (s vlanSpanningNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.VlanSpanning, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VlanSpanning))
	})
	return ret, err
}

// Get retrieves the VlanSpanning from the indexer for a given namespace and name.
func (s vlanSpanningNamespaceLister) Get(name string) (*v1alpha1.VlanSpanning, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("vlanspanning"), name)
	}
	return obj.(*v1alpha1.VlanSpanning), nil
}
