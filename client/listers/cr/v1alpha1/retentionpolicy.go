/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-ibm-api/apis/cr/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RetentionPolicyLister helps list RetentionPolicies.
// All objects returned here must be treated as read-only.
type RetentionPolicyLister interface {
	// List lists all RetentionPolicies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RetentionPolicy, err error)
	// RetentionPolicies returns an object that can list and get RetentionPolicies.
	RetentionPolicies(namespace string) RetentionPolicyNamespaceLister
	RetentionPolicyListerExpansion
}

// retentionPolicyLister implements the RetentionPolicyLister interface.
type retentionPolicyLister struct {
	indexer cache.Indexer
}

// NewRetentionPolicyLister returns a new RetentionPolicyLister.
func NewRetentionPolicyLister(indexer cache.Indexer) RetentionPolicyLister {
	return &retentionPolicyLister{indexer: indexer}
}

// List lists all RetentionPolicies in the indexer.
func (s *retentionPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.RetentionPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RetentionPolicy))
	})
	return ret, err
}

// RetentionPolicies returns an object that can list and get RetentionPolicies.
func (s *retentionPolicyLister) RetentionPolicies(namespace string) RetentionPolicyNamespaceLister {
	return retentionPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RetentionPolicyNamespaceLister helps list and get RetentionPolicies.
// All objects returned here must be treated as read-only.
type RetentionPolicyNamespaceLister interface {
	// List lists all RetentionPolicies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RetentionPolicy, err error)
	// Get retrieves the RetentionPolicy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.RetentionPolicy, error)
	RetentionPolicyNamespaceListerExpansion
}

// retentionPolicyNamespaceLister implements the RetentionPolicyNamespaceLister
// interface.
type retentionPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all RetentionPolicies in the indexer for a given namespace.
func (s retentionPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.RetentionPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RetentionPolicy))
	})
	return ret, err
}

// Get retrieves the RetentionPolicy from the indexer for a given namespace and name.
func (s retentionPolicyNamespaceLister) Get(name string) (*v1alpha1.RetentionPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("retentionpolicy"), name)
	}
	return obj.(*v1alpha1.RetentionPolicy), nil
}
