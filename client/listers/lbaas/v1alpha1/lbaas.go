/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-ibm-api/apis/lbaas/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// LbaasLister helps list Lbaases.
// All objects returned here must be treated as read-only.
type LbaasLister interface {
	// List lists all Lbaases in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Lbaas, err error)
	// Lbaases returns an object that can list and get Lbaases.
	Lbaases(namespace string) LbaasNamespaceLister
	LbaasListerExpansion
}

// lbaasLister implements the LbaasLister interface.
type lbaasLister struct {
	indexer cache.Indexer
}

// NewLbaasLister returns a new LbaasLister.
func NewLbaasLister(indexer cache.Indexer) LbaasLister {
	return &lbaasLister{indexer: indexer}
}

// List lists all Lbaases in the indexer.
func (s *lbaasLister) List(selector labels.Selector) (ret []*v1alpha1.Lbaas, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Lbaas))
	})
	return ret, err
}

// Lbaases returns an object that can list and get Lbaases.
func (s *lbaasLister) Lbaases(namespace string) LbaasNamespaceLister {
	return lbaasNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// LbaasNamespaceLister helps list and get Lbaases.
// All objects returned here must be treated as read-only.
type LbaasNamespaceLister interface {
	// List lists all Lbaases in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Lbaas, err error)
	// Get retrieves the Lbaas from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Lbaas, error)
	LbaasNamespaceListerExpansion
}

// lbaasNamespaceLister implements the LbaasNamespaceLister
// interface.
type lbaasNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Lbaases in the indexer for a given namespace.
func (s lbaasNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Lbaas, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Lbaas))
	})
	return ret, err
}

// Get retrieves the Lbaas from the indexer for a given namespace and name.
func (s lbaasNamespaceLister) Get(name string) (*v1alpha1.Lbaas, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("lbaas"), name)
	}
	return obj.(*v1alpha1.Lbaas), nil
}
