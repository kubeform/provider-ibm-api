/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-ibm-api/apis/lbaas/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ServerInstanceAttachmentLister helps list ServerInstanceAttachments.
// All objects returned here must be treated as read-only.
type ServerInstanceAttachmentLister interface {
	// List lists all ServerInstanceAttachments in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ServerInstanceAttachment, err error)
	// ServerInstanceAttachments returns an object that can list and get ServerInstanceAttachments.
	ServerInstanceAttachments(namespace string) ServerInstanceAttachmentNamespaceLister
	ServerInstanceAttachmentListerExpansion
}

// serverInstanceAttachmentLister implements the ServerInstanceAttachmentLister interface.
type serverInstanceAttachmentLister struct {
	indexer cache.Indexer
}

// NewServerInstanceAttachmentLister returns a new ServerInstanceAttachmentLister.
func NewServerInstanceAttachmentLister(indexer cache.Indexer) ServerInstanceAttachmentLister {
	return &serverInstanceAttachmentLister{indexer: indexer}
}

// List lists all ServerInstanceAttachments in the indexer.
func (s *serverInstanceAttachmentLister) List(selector labels.Selector) (ret []*v1alpha1.ServerInstanceAttachment, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServerInstanceAttachment))
	})
	return ret, err
}

// ServerInstanceAttachments returns an object that can list and get ServerInstanceAttachments.
func (s *serverInstanceAttachmentLister) ServerInstanceAttachments(namespace string) ServerInstanceAttachmentNamespaceLister {
	return serverInstanceAttachmentNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ServerInstanceAttachmentNamespaceLister helps list and get ServerInstanceAttachments.
// All objects returned here must be treated as read-only.
type ServerInstanceAttachmentNamespaceLister interface {
	// List lists all ServerInstanceAttachments in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ServerInstanceAttachment, err error)
	// Get retrieves the ServerInstanceAttachment from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ServerInstanceAttachment, error)
	ServerInstanceAttachmentNamespaceListerExpansion
}

// serverInstanceAttachmentNamespaceLister implements the ServerInstanceAttachmentNamespaceLister
// interface.
type serverInstanceAttachmentNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ServerInstanceAttachments in the indexer for a given namespace.
func (s serverInstanceAttachmentNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ServerInstanceAttachment, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServerInstanceAttachment))
	})
	return ret, err
}

// Get retrieves the ServerInstanceAttachment from the indexer for a given namespace and name.
func (s serverInstanceAttachmentNamespaceLister) Get(name string) (*v1alpha1.ServerInstanceAttachment, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("serverinstanceattachment"), name)
	}
	return obj.(*v1alpha1.ServerInstanceAttachment), nil
}
