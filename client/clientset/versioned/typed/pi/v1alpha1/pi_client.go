/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-ibm-api/apis/pi/v1alpha1"
	"kubeform.dev/provider-ibm-api/client/clientset/versioned/scheme"

	rest "k8s.io/client-go/rest"
)

type PiV1alpha1Interface interface {
	RESTClient() rest.Interface
	CapturesGetter
	ImagesGetter
	InstancesGetter
	KeysGetter
	NetworksGetter
	NetworkPortsGetter
	NetworkPortAttachesGetter
	OperationsesGetter
	SnapshotsGetter
	VolumesGetter
	VolumeAttachesGetter
}

// PiV1alpha1Client is used to interact with features provided by the pi.ibm.kubeform.com group.
type PiV1alpha1Client struct {
	restClient rest.Interface
}

func (c *PiV1alpha1Client) Captures(namespace string) CaptureInterface {
	return newCaptures(c, namespace)
}

func (c *PiV1alpha1Client) Images(namespace string) ImageInterface {
	return newImages(c, namespace)
}

func (c *PiV1alpha1Client) Instances(namespace string) InstanceInterface {
	return newInstances(c, namespace)
}

func (c *PiV1alpha1Client) Keys(namespace string) KeyInterface {
	return newKeys(c, namespace)
}

func (c *PiV1alpha1Client) Networks(namespace string) NetworkInterface {
	return newNetworks(c, namespace)
}

func (c *PiV1alpha1Client) NetworkPorts(namespace string) NetworkPortInterface {
	return newNetworkPorts(c, namespace)
}

func (c *PiV1alpha1Client) NetworkPortAttaches(namespace string) NetworkPortAttachInterface {
	return newNetworkPortAttaches(c, namespace)
}

func (c *PiV1alpha1Client) Operationses(namespace string) OperationsInterface {
	return newOperationses(c, namespace)
}

func (c *PiV1alpha1Client) Snapshots(namespace string) SnapshotInterface {
	return newSnapshots(c, namespace)
}

func (c *PiV1alpha1Client) Volumes(namespace string) VolumeInterface {
	return newVolumes(c, namespace)
}

func (c *PiV1alpha1Client) VolumeAttaches(namespace string) VolumeAttachInterface {
	return newVolumeAttaches(c, namespace)
}

// NewForConfig creates a new PiV1alpha1Client for the given config.
func NewForConfig(c *rest.Config) (*PiV1alpha1Client, error) {
	config := *c
	if err := setConfigDefaults(&config); err != nil {
		return nil, err
	}
	client, err := rest.RESTClientFor(&config)
	if err != nil {
		return nil, err
	}
	return &PiV1alpha1Client{client}, nil
}

// NewForConfigOrDie creates a new PiV1alpha1Client for the given config and
// panics if there is an error in the config.
func NewForConfigOrDie(c *rest.Config) *PiV1alpha1Client {
	client, err := NewForConfig(c)
	if err != nil {
		panic(err)
	}
	return client
}

// New creates a new PiV1alpha1Client for the given RESTClient.
func New(c rest.Interface) *PiV1alpha1Client {
	return &PiV1alpha1Client{c}
}

func setConfigDefaults(config *rest.Config) error {
	gv := v1alpha1.SchemeGroupVersion
	config.GroupVersion = &gv
	config.APIPath = "/apis"
	config.NegotiatedSerializer = scheme.Codecs.WithoutConversion()

	if config.UserAgent == "" {
		config.UserAgent = rest.DefaultKubernetesUserAgent()
	}

	return nil
}

// RESTClient returns a RESTClient that is used to communicate
// with API server by this client implementation.
func (c *PiV1alpha1Client) RESTClient() rest.Interface {
	if c == nil {
		return nil
	}
	return c.restClient
}
