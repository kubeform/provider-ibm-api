/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-ibm-api/apis/iam/v1alpha1"
	"kubeform.dev/provider-ibm-api/client/clientset/versioned/scheme"

	rest "k8s.io/client-go/rest"
)

type IamV1alpha1Interface interface {
	RESTClient() rest.Interface
	AccessGroupsGetter
	AccessGroupDynamicRulesGetter
	AccessGroupMembersesGetter
	AccessGroupPoliciesGetter
	AccountSettingsesGetter
	ApiKeysGetter
	AuthorizationPoliciesGetter
	AuthorizationPolicyDetachesGetter
	CustomRolesGetter
	ServiceAPIKeysGetter
	ServiceIDsGetter
	ServicePoliciesGetter
	UserInvitesGetter
	UserPoliciesGetter
	UserSettingsesGetter
}

// IamV1alpha1Client is used to interact with features provided by the iam.ibm.kubeform.com group.
type IamV1alpha1Client struct {
	restClient rest.Interface
}

func (c *IamV1alpha1Client) AccessGroups(namespace string) AccessGroupInterface {
	return newAccessGroups(c, namespace)
}

func (c *IamV1alpha1Client) AccessGroupDynamicRules(namespace string) AccessGroupDynamicRuleInterface {
	return newAccessGroupDynamicRules(c, namespace)
}

func (c *IamV1alpha1Client) AccessGroupMemberses(namespace string) AccessGroupMembersInterface {
	return newAccessGroupMemberses(c, namespace)
}

func (c *IamV1alpha1Client) AccessGroupPolicies(namespace string) AccessGroupPolicyInterface {
	return newAccessGroupPolicies(c, namespace)
}

func (c *IamV1alpha1Client) AccountSettingses(namespace string) AccountSettingsInterface {
	return newAccountSettingses(c, namespace)
}

func (c *IamV1alpha1Client) ApiKeys(namespace string) ApiKeyInterface {
	return newApiKeys(c, namespace)
}

func (c *IamV1alpha1Client) AuthorizationPolicies(namespace string) AuthorizationPolicyInterface {
	return newAuthorizationPolicies(c, namespace)
}

func (c *IamV1alpha1Client) AuthorizationPolicyDetaches(namespace string) AuthorizationPolicyDetachInterface {
	return newAuthorizationPolicyDetaches(c, namespace)
}

func (c *IamV1alpha1Client) CustomRoles(namespace string) CustomRoleInterface {
	return newCustomRoles(c, namespace)
}

func (c *IamV1alpha1Client) ServiceAPIKeys(namespace string) ServiceAPIKeyInterface {
	return newServiceAPIKeys(c, namespace)
}

func (c *IamV1alpha1Client) ServiceIDs(namespace string) ServiceIDInterface {
	return newServiceIDs(c, namespace)
}

func (c *IamV1alpha1Client) ServicePolicies(namespace string) ServicePolicyInterface {
	return newServicePolicies(c, namespace)
}

func (c *IamV1alpha1Client) UserInvites(namespace string) UserInviteInterface {
	return newUserInvites(c, namespace)
}

func (c *IamV1alpha1Client) UserPolicies(namespace string) UserPolicyInterface {
	return newUserPolicies(c, namespace)
}

func (c *IamV1alpha1Client) UserSettingses(namespace string) UserSettingsInterface {
	return newUserSettingses(c, namespace)
}

// NewForConfig creates a new IamV1alpha1Client for the given config.
func NewForConfig(c *rest.Config) (*IamV1alpha1Client, error) {
	config := *c
	if err := setConfigDefaults(&config); err != nil {
		return nil, err
	}
	client, err := rest.RESTClientFor(&config)
	if err != nil {
		return nil, err
	}
	return &IamV1alpha1Client{client}, nil
}

// NewForConfigOrDie creates a new IamV1alpha1Client for the given config and
// panics if there is an error in the config.
func NewForConfigOrDie(c *rest.Config) *IamV1alpha1Client {
	client, err := NewForConfig(c)
	if err != nil {
		panic(err)
	}
	return client
}

// New creates a new IamV1alpha1Client for the given RESTClient.
func New(c rest.Interface) *IamV1alpha1Client {
	return &IamV1alpha1Client{c}
}

func setConfigDefaults(config *rest.Config) error {
	gv := v1alpha1.SchemeGroupVersion
	config.GroupVersion = &gv
	config.APIPath = "/apis"
	config.NegotiatedSerializer = scheme.Codecs.WithoutConversion()

	if config.UserAgent == "" {
		config.UserAgent = rest.DefaultKubernetesUserAgent()
	}

	return nil
}

// RESTClient returns a RESTClient that is used to communicate
// with API server by this client implementation.
func (c *IamV1alpha1Client) RESTClient() rest.Interface {
	if c == nil {
		return nil
	}
	return c.restClient
}
