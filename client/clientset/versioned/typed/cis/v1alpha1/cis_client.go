/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-ibm-api/apis/cis/v1alpha1"
	"kubeform.dev/provider-ibm-api/client/clientset/versioned/scheme"

	rest "k8s.io/client-go/rest"
)

type CisV1alpha1Interface interface {
	RESTClient() rest.Interface
	CacheSettingsesGetter
	CertificateOrdersGetter
	CertificateUploadsGetter
	CisesGetter
	CustomPagesGetter
	DnsRecordsGetter
	DnsRecordsImportsGetter
	DomainsGetter
	DomainSettingsesGetter
	EdgeFunctionsActionsGetter
	EdgeFunctionsTriggersGetter
	FiltersGetter
	FirewallsGetter
	GlobalLoadBalancersGetter
	HealthchecksGetter
	OriginPoolsGetter
	PageRulesGetter
	RangeAppsGetter
	RateLimitsGetter
	RoutingsGetter
	TlsSettingsesGetter
	WafGroupsGetter
	WafPackagesGetter
	WafRulesGetter
}

// CisV1alpha1Client is used to interact with features provided by the cis.ibm.kubeform.com group.
type CisV1alpha1Client struct {
	restClient rest.Interface
}

func (c *CisV1alpha1Client) CacheSettingses(namespace string) CacheSettingsInterface {
	return newCacheSettingses(c, namespace)
}

func (c *CisV1alpha1Client) CertificateOrders(namespace string) CertificateOrderInterface {
	return newCertificateOrders(c, namespace)
}

func (c *CisV1alpha1Client) CertificateUploads(namespace string) CertificateUploadInterface {
	return newCertificateUploads(c, namespace)
}

func (c *CisV1alpha1Client) Cises(namespace string) CisInterface {
	return newCises(c, namespace)
}

func (c *CisV1alpha1Client) CustomPages(namespace string) CustomPageInterface {
	return newCustomPages(c, namespace)
}

func (c *CisV1alpha1Client) DnsRecords(namespace string) DnsRecordInterface {
	return newDnsRecords(c, namespace)
}

func (c *CisV1alpha1Client) DnsRecordsImports(namespace string) DnsRecordsImportInterface {
	return newDnsRecordsImports(c, namespace)
}

func (c *CisV1alpha1Client) Domains(namespace string) DomainInterface {
	return newDomains(c, namespace)
}

func (c *CisV1alpha1Client) DomainSettingses(namespace string) DomainSettingsInterface {
	return newDomainSettingses(c, namespace)
}

func (c *CisV1alpha1Client) EdgeFunctionsActions(namespace string) EdgeFunctionsActionInterface {
	return newEdgeFunctionsActions(c, namespace)
}

func (c *CisV1alpha1Client) EdgeFunctionsTriggers(namespace string) EdgeFunctionsTriggerInterface {
	return newEdgeFunctionsTriggers(c, namespace)
}

func (c *CisV1alpha1Client) Filters(namespace string) FilterInterface {
	return newFilters(c, namespace)
}

func (c *CisV1alpha1Client) Firewalls(namespace string) FirewallInterface {
	return newFirewalls(c, namespace)
}

func (c *CisV1alpha1Client) GlobalLoadBalancers(namespace string) GlobalLoadBalancerInterface {
	return newGlobalLoadBalancers(c, namespace)
}

func (c *CisV1alpha1Client) Healthchecks(namespace string) HealthcheckInterface {
	return newHealthchecks(c, namespace)
}

func (c *CisV1alpha1Client) OriginPools(namespace string) OriginPoolInterface {
	return newOriginPools(c, namespace)
}

func (c *CisV1alpha1Client) PageRules(namespace string) PageRuleInterface {
	return newPageRules(c, namespace)
}

func (c *CisV1alpha1Client) RangeApps(namespace string) RangeAppInterface {
	return newRangeApps(c, namespace)
}

func (c *CisV1alpha1Client) RateLimits(namespace string) RateLimitInterface {
	return newRateLimits(c, namespace)
}

func (c *CisV1alpha1Client) Routings(namespace string) RoutingInterface {
	return newRoutings(c, namespace)
}

func (c *CisV1alpha1Client) TlsSettingses(namespace string) TlsSettingsInterface {
	return newTlsSettingses(c, namespace)
}

func (c *CisV1alpha1Client) WafGroups(namespace string) WafGroupInterface {
	return newWafGroups(c, namespace)
}

func (c *CisV1alpha1Client) WafPackages(namespace string) WafPackageInterface {
	return newWafPackages(c, namespace)
}

func (c *CisV1alpha1Client) WafRules(namespace string) WafRuleInterface {
	return newWafRules(c, namespace)
}

// NewForConfig creates a new CisV1alpha1Client for the given config.
func NewForConfig(c *rest.Config) (*CisV1alpha1Client, error) {
	config := *c
	if err := setConfigDefaults(&config); err != nil {
		return nil, err
	}
	client, err := rest.RESTClientFor(&config)
	if err != nil {
		return nil, err
	}
	return &CisV1alpha1Client{client}, nil
}

// NewForConfigOrDie creates a new CisV1alpha1Client for the given config and
// panics if there is an error in the config.
func NewForConfigOrDie(c *rest.Config) *CisV1alpha1Client {
	client, err := NewForConfig(c)
	if err != nil {
		panic(err)
	}
	return client
}

// New creates a new CisV1alpha1Client for the given RESTClient.
func New(c rest.Interface) *CisV1alpha1Client {
	return &CisV1alpha1Client{c}
}

func setConfigDefaults(config *rest.Config) error {
	gv := v1alpha1.SchemeGroupVersion
	config.GroupVersion = &gv
	config.APIPath = "/apis"
	config.NegotiatedSerializer = scheme.Codecs.WithoutConversion()

	if config.UserAgent == "" {
		config.UserAgent = rest.DefaultKubernetesUserAgent()
	}

	return nil
}

// RESTClient returns a RESTClient that is used to communicate
// with API server by this client implementation.
func (c *CisV1alpha1Client) RESTClient() rest.Interface {
	if c == nil {
		return nil
	}
	return c.restClient
}
